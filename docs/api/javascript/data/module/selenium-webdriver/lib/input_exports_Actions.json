[null,[[["Actions",null,null,null,[null,572,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L572"]],null,[[[null,"<p>User facing API for generating complex user gestures. This class should not\nbe instantiated directly. Instead, users should create new instances by\ncalling <a href=\"webdriver_exports_WebDriver.html#actions\"><code>WebDriver.actions()</code></a>.</p>\n<h3>Action Ticks</h3>\n<p>Action sequences are divided into a series of &#34;ticks&#34;. At each tick, the\nWebDriver remote end will perform a single action for each device included\nin the action sequence. At tick 0, the driver will perform the first action\ndefined for each device, at tick 1 the second action for each device, and\nso on until all actions have been executed. If an individual device does\nnot have an action defined at a particular tick, it will automatically\npause.</p>\n<p>By default, action sequences will be synchronized so only one device has a\ndefine action in each tick. Consider the following code sample:</p>\n<pre><code> const actions &#61; driver.actions();\n\n await actions\n     .keyDown(SHIFT)\n     .move({origin: el})\n     .press()\n     .release()\n     .keyUp(SHIFT)\n     .perform();\n</code></pre>\n<p>This sample produces the following sequence of ticks:</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th><th>Tick 3</th><th>Tick 4</th><th>Tick 5</th></tr></thead><tbody><tr><td>Keyboard</td><td>keyDown(SHIFT)</td><td>pause()</td><td>pause()</td><td>pause()</td><td>keyUp(SHIFT)</td></tr><tr><td>Mouse</td><td>pause()</td><td>move({origin: el})</td><td>press()</td><td>release()</td><td>pause()</td></tr></tbody></table>\n<p>If you&#39;d like the remote end to execute actions with multiple devices\nsimultaneously, you may pass <code>{async: true}</code> when creating the actions\nbuilder. With synchronization disabled (<code>{async: true}</code>), the ticks from our\nprevious example become:</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th><th>Tick 3</th></tr></thead><tbody><tr><td>Keyboard</td><td>keyDown(SHIFT)</td><td>keyUp(SHIFT)</td><td></td></tr><tr><td>Mouse</td><td>move({origin: el})</td><td>press()</td><td>release()</td></tr></tbody></table>\n<p>When synchronization is disabled, it is your responsibility to insert\n<a href=\"input_exports_Actions.html#pause\">pauses</a> for each device, as needed:</p>\n<pre><code> const actions &#61; driver.actions({async: true});\n const kb &#61; actions.keyboard();\n const mouse &#61; actions.mouse();\n\n actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n actions.pause(mouse).move({origin: el}).press().release();\n actions.perform();\n</code></pre>\n<p>With pauses insert for individual devices, we&#39;re back to:</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th><th>Tick 3</th><th>Tick 4</th></tr></thead><tbody><tr><td>Keyboard</td><td>keyDown(SHIFT)</td><td>pause()</td><td>pause()</td><td>keyUp(SHIFT)</td></tr><tr><td>Mouse</td><td>pause()</td><td>move({origin: el})</td><td>press()</td><td>release()</td></tr></tbody></table>\n<h4>Tick Durations</h4>\n<p>The length of each action tick is however long it takes the remote end to\nexecute the actions for every device in that tick. Most actions are\n&#34;instaneous&#34;, however, <a href=\"input_exports_Actions.html#pause\">pause</a> and\n<a href=\"input_exports_Actions.html#move\">pointer move</a> actions allow you to specify a duration for\nhow long that action should take. The remote end will always wait for all\nactions within a tick to finish before starting the next tick, so a device\nmay implicitly pause while waiting for other devices to finish.</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th></tr></thead><tbody><tr><td>Pointer 1</td><td>move({duration: 200})</td><td>press()</td></tr><tr><td>Pointer 2</td><td>move({duration: 300})</td><td>press()</td></tr></tbody></table>\n<p>In table above, the move for Pointer 1 should only take 200 ms, but the\nremote end will wait for the move for Pointer 2 to finish\n(an additional 100 ms) before proceeding to Tick 2.</p>\n<p>This implicit waiting also applies to pauses. In the table below, even though\nthe keyboard only defines a pause of 100 ms, the remote end will wait an\nadditional 200 ms for the mouse mmove to finish before moving to Tick 2.</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th></tr></thead><tbody><tr><td>Keyboard</td><td>pause(100)</td><td>keyDown(SHIFT)</td></tr><tr><td>Mouse</td><td>move({duration: 300})</td><td></td></tr></tbody></table>\n<h4>Bridge Mode</h4>\n<p>As of January 2018, only Firefox natively supports this API. For other\nbrowsers, you may either use the\n<a href=\"actions_exports_LegacyActionSequence.html\"><code>LegacyActionSequence</code></a> class, <em>or</em> you\ncan put the Actions class into bridge mode by passing <code>{bridge: true}</code> on\ncreation:</p>\n<pre><code> const actions &#61; driver.actions({bridge: true});\n await actions.click(element).sendKeys(&#39;abc&#39;).perform();\n</code></pre>\n<p>In bridge mode, <a href=\"input_exports_Actions.html#perform\"><code>perform()</code></a> will first attempt to execute the\nconfigured action sequence using the W3C action protocol. If this is rejected\nby the remote end, the sequence will be translated to and executed against\nthe legacy protocol.</p>\n<p>Bridge mode <strong>is not enabled by default</strong> as there are several notable\ndifferences between W3C-specified and legacy protocols. Care must be\ntaken to configure your action sequences to account for these differences:</p>\n<ol><li>\n<p>For W3C actions, the entire action sequence is executed in a single\ncall to the remote end. For legacy sequences, multiple calls must be\nmade for each step in the sequence. This introduces additional latency\nwhich may impact how the browser responds to the emulated user actions.</p>\n</li><li>\n<p>For the legacy actions, <a href=\"input_exports_Actions.html#pause\">pauses</a> are handled <em>locally</em>.</p>\n</li><li>\n<p>For legacy actions, a <a href=\"input_exports_Actions.html#keyDown\">keyDown()</a> for a\n<em>non-modifier key</em> <strong>must</strong> be followed by a <a href=\"input_exports_Actions.html\">keyUp()</a>\nfor the same key. This will be handled for you if you use the\n<a href=\"input_exports_Actions.html#sendKeys\">sendKeys()</a> method.</p>\n</li><li>\n<p>Mouse movements may not be specified relative to\n<a href=\"input_exports_Origin.html#VIEWPORT\">Origin.VIEWPORT</a>.\nAll movements must be relative to an element or the mouse&#39;s current\nposition (<a href=\"input_exports_Origin.html#POINTER\">Origin.POINTER</a>).\nThe <a href=\"input_exports_Actions.html#move\">move()</a> method defaults to viewport relative\noffsets, so you must always specify an appropriate origin in bridge mode:</p>\n<pre><code>driver.actions({bridge: true})\n    .move({x: 0, y: 0, origin: Origin.POINTER})\n    .perform();\ndriver.actions({bridge: true})\n    .move({x: 0, y: 0, origin: someWebElement})\n    .perform();\n</code></pre>\n</li><li>\n<p>The legacy protocol does not support specifying the duration of a\n<a href=\"input_exports_Actions.html#move\">mouse movement</a>; any specified duration <em>is ignored</em>\nwhen translating actions to the legacy protocol.</p>\n</li><li>\n<p>For W3C actions, move offsets relative to a\n<a href=\"webdriver_exports_WebElement.html\">WebElement</a> are interpretted relative\nto the center of an element&#39;s <em>first</em> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\">client rect</a> in the viewport. For\nlegacy actions, element offsets are relative to the top-left corner of\nthe element&#39;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">bounding client rect</a>. When translating actions to the\nlegacy protocol in bridge mode, an extra command must be inserted to\ntranslate move offsets from one frame of reference to the other. This\nextra command conributes to the overall latency issue outlined in\npoint 1.</p>\n</li></ol>\n"]]],[null,null,null,1],null,[],null,[],[],[["Actions",[null,572,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L572"]],[[[null,"<p>User facing API for generating complex user gestures. This class should not\nbe instantiated directly. Instead, users should create new instances by\ncalling <a href=\"webdriver_exports_WebDriver.html#actions\"><code>WebDriver.actions()</code></a>.</p>\n<h3>Action Ticks</h3>\n<p>Action sequences are divided into a series of &#34;ticks&#34;. At each tick, the\nWebDriver remote end will perform a single action for each device included\nin the action sequence. At tick 0, the driver will perform the first action\ndefined for each device, at tick 1 the second action for each device, and\nso on until all actions have been executed. If an individual device does\nnot have an action defined at a particular tick, it will automatically\npause.</p>\n<p>By default, action sequences will be synchronized so only one device has a\ndefine action in each tick. Consider the following code sample:</p>\n<pre><code> const actions &#61; driver.actions();\n\n await actions\n     .keyDown(SHIFT)\n     .move({origin: el})\n     .press()\n     .release()\n     .keyUp(SHIFT)\n     .perform();\n</code></pre>\n<p>This sample produces the following sequence of ticks:</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th><th>Tick 3</th><th>Tick 4</th><th>Tick 5</th></tr></thead><tbody><tr><td>Keyboard</td><td>keyDown(SHIFT)</td><td>pause()</td><td>pause()</td><td>pause()</td><td>keyUp(SHIFT)</td></tr><tr><td>Mouse</td><td>pause()</td><td>move({origin: el})</td><td>press()</td><td>release()</td><td>pause()</td></tr></tbody></table>\n<p>If you&#39;d like the remote end to execute actions with multiple devices\nsimultaneously, you may pass <code>{async: true}</code> when creating the actions\nbuilder. With synchronization disabled (<code>{async: true}</code>), the ticks from our\nprevious example become:</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th><th>Tick 3</th></tr></thead><tbody><tr><td>Keyboard</td><td>keyDown(SHIFT)</td><td>keyUp(SHIFT)</td><td></td></tr><tr><td>Mouse</td><td>move({origin: el})</td><td>press()</td><td>release()</td></tr></tbody></table>\n<p>When synchronization is disabled, it is your responsibility to insert\n<a href=\"input_exports_Actions.html#pause\">pauses</a> for each device, as needed:</p>\n<pre><code> const actions &#61; driver.actions({async: true});\n const kb &#61; actions.keyboard();\n const mouse &#61; actions.mouse();\n\n actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n actions.pause(mouse).move({origin: el}).press().release();\n actions.perform();\n</code></pre>\n<p>With pauses insert for individual devices, we&#39;re back to:</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th><th>Tick 3</th><th>Tick 4</th></tr></thead><tbody><tr><td>Keyboard</td><td>keyDown(SHIFT)</td><td>pause()</td><td>pause()</td><td>keyUp(SHIFT)</td></tr><tr><td>Mouse</td><td>pause()</td><td>move({origin: el})</td><td>press()</td><td>release()</td></tr></tbody></table>\n<h4>Tick Durations</h4>\n<p>The length of each action tick is however long it takes the remote end to\nexecute the actions for every device in that tick. Most actions are\n&#34;instaneous&#34;, however, <a href=\"input_exports_Actions.html#pause\">pause</a> and\n<a href=\"input_exports_Actions.html#move\">pointer move</a> actions allow you to specify a duration for\nhow long that action should take. The remote end will always wait for all\nactions within a tick to finish before starting the next tick, so a device\nmay implicitly pause while waiting for other devices to finish.</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th></tr></thead><tbody><tr><td>Pointer 1</td><td>move({duration: 200})</td><td>press()</td></tr><tr><td>Pointer 2</td><td>move({duration: 300})</td><td>press()</td></tr></tbody></table>\n<p>In table above, the move for Pointer 1 should only take 200 ms, but the\nremote end will wait for the move for Pointer 2 to finish\n(an additional 100 ms) before proceeding to Tick 2.</p>\n<p>This implicit waiting also applies to pauses. In the table below, even though\nthe keyboard only defines a pause of 100 ms, the remote end will wait an\nadditional 200 ms for the mouse mmove to finish before moving to Tick 2.</p>\n<table><thead><tr><th>Device</th><th>Tick 1</th><th>Tick 2</th></tr></thead><tbody><tr><td>Keyboard</td><td>pause(100)</td><td>keyDown(SHIFT)</td></tr><tr><td>Mouse</td><td>move({duration: 300})</td><td></td></tr></tbody></table>\n<h4>Bridge Mode</h4>\n<p>As of January 2018, only Firefox natively supports this API. For other\nbrowsers, you may either use the\n<a href=\"actions_exports_LegacyActionSequence.html\"><code>LegacyActionSequence</code></a> class, <em>or</em> you\ncan put the Actions class into bridge mode by passing <code>{bridge: true}</code> on\ncreation:</p>\n<pre><code> const actions &#61; driver.actions({bridge: true});\n await actions.click(element).sendKeys(&#39;abc&#39;).perform();\n</code></pre>\n<p>In bridge mode, <a href=\"input_exports_Actions.html#perform\"><code>perform()</code></a> will first attempt to execute the\nconfigured action sequence using the W3C action protocol. If this is rejected\nby the remote end, the sequence will be translated to and executed against\nthe legacy protocol.</p>\n<p>Bridge mode <strong>is not enabled by default</strong> as there are several notable\ndifferences between W3C-specified and legacy protocols. Care must be\ntaken to configure your action sequences to account for these differences:</p>\n<ol><li>\n<p>For W3C actions, the entire action sequence is executed in a single\ncall to the remote end. For legacy sequences, multiple calls must be\nmade for each step in the sequence. This introduces additional latency\nwhich may impact how the browser responds to the emulated user actions.</p>\n</li><li>\n<p>For the legacy actions, <a href=\"input_exports_Actions.html#pause\">pauses</a> are handled <em>locally</em>.</p>\n</li><li>\n<p>For legacy actions, a <a href=\"input_exports_Actions.html#keyDown\">keyDown()</a> for a\n<em>non-modifier key</em> <strong>must</strong> be followed by a <a href=\"input_exports_Actions.html\">keyUp()</a>\nfor the same key. This will be handled for you if you use the\n<a href=\"input_exports_Actions.html#sendKeys\">sendKeys()</a> method.</p>\n</li><li>\n<p>Mouse movements may not be specified relative to\n<a href=\"input_exports_Origin.html#VIEWPORT\">Origin.VIEWPORT</a>.\nAll movements must be relative to an element or the mouse&#39;s current\nposition (<a href=\"input_exports_Origin.html#POINTER\">Origin.POINTER</a>).\nThe <a href=\"input_exports_Actions.html#move\">move()</a> method defaults to viewport relative\noffsets, so you must always specify an appropriate origin in bridge mode:</p>\n<pre><code>driver.actions({bridge: true})\n    .move({x: 0, y: 0, origin: Origin.POINTER})\n    .perform();\ndriver.actions({bridge: true})\n    .move({x: 0, y: 0, origin: someWebElement})\n    .perform();\n</code></pre>\n</li><li>\n<p>The legacy protocol does not support specifying the duration of a\n<a href=\"input_exports_Actions.html#move\">mouse movement</a>; any specified duration <em>is ignored</em>\nwhen translating actions to the legacy protocol.</p>\n</li><li>\n<p>For W3C actions, move offsets relative to a\n<a href=\"webdriver_exports_WebElement.html\">WebElement</a> are interpretted relative\nto the center of an element&#39;s <em>first</em> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\">client rect</a> in the viewport. For\nlegacy actions, element offsets are relative to the top-left corner of\nthe element&#39;s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">bounding client rect</a>. When translating actions to the\nlegacy protocol in bridge mode, an extra command must be inserted to\ntranslate move offsets from one frame of reference to the other. This\nextra command conributes to the overall latency issue outlined in\npoint 1.</p>\n</li></ol>\n"]]],null,null,null,null,null,[],[[[[null,"<p><a href=\"https://www.w3.org/TR/webdriver/#actions\">https://www.w3.org/TR/webdriver/#actions</a></p>\n"]]]]],[],1,[["executor",[null,null,null,["Executor","selenium-webdriver/lib/command.Executor",[null,null,[null,null,"command_exports_Executor.html"]],null,[]]],[[[null,"<p>The object to execute the configured\nactions with.</p>\n"]]]],["options",[null,null,null,null,[[["async",[null,null,null,null,null,[[[null,null,null,["boolean",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]]],["bridge",[null,null,null,null,null,[[[null,null,null,["boolean",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]]]]]],[[[null,"<p>Options for this action\nsequence (see class description for details).</p>\n"]]]]],null,[]],[[["clear",[null,938,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L938"]],[[[null,"<p>Releases all keys, pointers, and clears internal state.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["Promise",null,null,1,[[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>a promise that will resolve when finished\nclearing all action state.</p>\n"]]]],[]],[["click",[null,863,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L863"]],[[[null,"<p>Short-hand for performing a simple left-click (down/up) with the mouse.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["element",[1,null,null,null,null,[[[null,null,null,["WebElement","selenium-webdriver/lib/webdriver.WebElement",[null,null,[null,null,"webdriver_exports_WebElement.html"]],null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>If specified, the mouse will\nfirst be moved to the center of the element before performing the\nclick.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["contextClick",[null,878,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L878"]],[[[null,"<p>Short-hand for performing a simple right-click (down/up) with the mouse.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["element",[1,null,null,null,null,[[[null,null,null,["WebElement","selenium-webdriver/lib/webdriver.WebElement",[null,null,[null,null,"webdriver_exports_WebElement.html"]],null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>If specified, the mouse will\nfirst be moved to the center of the element before performing the\nclick.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["doubleClick",[null,893,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L893"]],[[[null,"<p>Short-hand for performing a double left-click with the mouse.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["element",[1,null,null,null,null,[[[null,null,null,["WebElement","selenium-webdriver/lib/webdriver.WebElement",[null,null,[null,null,"webdriver_exports_WebElement.html"]],null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>If specified, the mouse will\nfirst be moved to the center of the element before performing the\nclick.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["dragAndDrop",[null,914,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L914"]],[[[null,"<p>Configures a drag-and-drop action consisting of the following steps:</p>\n<ol><li>Move to the center of the <code>from</code> element (element to be dragged).</li><li>Press the left mouse button.</li><li>If the <code>to</code> target is a <a href=\"webdriver_exports_WebElement.html\">WebElement</a>,\nmove the mouse to its center. Otherwise, move the mouse by the\nspecified offset.</li><li>Releae the left mouse button.</li></ol>\n"]]],null,null,null,null,null,[],[]],[],null,[["from",[null,null,null,["WebElement","selenium-webdriver/lib/webdriver.WebElement",[null,null,[null,null,"webdriver_exports_WebElement.html"]],null,[]]],[[[null,"<p>The element to press the left mouse\nbutton on to start the drag.</p>\n"]]]],["to",[null,null,null,null,null,[[[null,null,null,["WebElement","selenium-webdriver/lib/webdriver.WebElement",[null,null,[null,null,"webdriver_exports_WebElement.html"]],null,[]]],[null,null,null,null,[[["x",[null,null,null,["number",null,null,1,[]]]],["y",[null,null,null,["number",null,null,1,[]]]]]]]]]],[[[null,"<p>Either another\nelement to drag to (will drag to the center of the element), or an\nobject specifying the offset to drag by, in pixels.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["insert",[null,643,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L643"]],[[[null,"<p>Appends <code>actions</code> to the end of the current sequence for the given\n<code>device</code>. If device synchronization is enabled, after inserting the\nactions, pauses will be inserted for all other devices to ensure all action\nsequences are the same length.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["device",[null,null,null,["Device","selenium-webdriver/lib/input.Device",[null,null,[null,null,"input_exports_Device.html"]],null,[]]],[[[null,"<p>the device to update.</p>\n"]]]],["actions",[null,1,null,["Action","selenium-webdriver/lib/input.Action",[null,null,[null,null,"input_exports_Action.html"]],null,[]]],[[[null,"<p>the actions to insert.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["keyDown",[null,763,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L763"]],[[[null,"<p>Inserts an action to press a single key.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["key",[null,null,null,null,null,[[[null,null,null,["string",null,null,1,[]]],[null,null,null,["number",null,null,1,[]]]]]],[[[null,"<p>the key to press. This key may be\nspecified as a <code>Key</code> value, a specific unicode code point,\nor a string containing a single unicode code point.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["keyUp",[null,775,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L775"]],[[[null,"<p>Inserts an action to release a single key.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["key",[null,null,null,null,null,[[[null,null,null,["string",null,null,1,[]]],[null,null,null,["number",null,null,1,[]]]]]],[[[null,"<p>the key to release. This key may be\nspecified as a <code>Key</code> value, a specific unicode code point,\nor a string containing a single unicode code point.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["keyboard",[null,610,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L610"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["Keyboard","selenium-webdriver/lib/input.Keyboard",[null,null,[null,null,"input_exports_Keyboard.html"]],null,[]]],[[[null,"<p>the keyboard device handle.</p>\n"]]]],[]],[["mouse",[null,615,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L615"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["Pointer","selenium-webdriver/lib/input.Pointer",[null,null,[null,null,"input_exports_Pointer.html"]],null,[]]],[[[null,"<p>the mouse pointer device handle.</p>\n"]]]],[]],[["move",[null,850,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L850"]],[[[null,"<p>Inserts an action for moving the mouse <code>x</code> and <code>y</code> pixels relative to the\nspecified <code>origin</code>. The <code>origin</code> may be defined as the mouse&#39;s\n<a href=\"input_exports_Origin.html#POINTER\">current position</a>, the\n<a href=\"input_exports_Origin.html#VIEWPORT\">viewport</a>, or the center of a specific\n<a href=\"webdriver_exports_WebElement.html\">WebElement</a>.</p>\n<p>You may adjust how long the remote end should take, in milliseconds, to\nperform the move using the <code>duration</code> parameter (defaults to 100 ms).\nThe number of incremental move events generated over this duration is an\nimplementation detail for the remote end.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["options",[1,null,null,null,null,[[[null,null,null,null,[[["duration",[null,null,null,null,null,[[[null,null,null,["number",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]]],["origin",[null,null,null,null,null,[[[null,null,null,["Origin","selenium-webdriver/lib/input.Origin",[null,null,[null,null,"input_exports_Origin.html"]],null,[]]],[null,null,null,["WebElement","selenium-webdriver/lib/webdriver.WebElement",[null,null,[null,null,"webdriver_exports_WebElement.html"]],null,[]]],[null,null,null,null,null,null,null,null,1]]]]],["x",[null,null,null,null,null,[[[null,null,null,["number",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]]],["y",[null,null,null,null,null,[[[null,null,null,["number",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]]]]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>The move options. Defaults to moving the mouse to the top-left\ncorner of the viewport over 100ms.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["pause",[null,736,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L736"]],[[[null,"<p>Inserts a pause action for the specified devices, ensuring each device is\nidle for a tick. The length of the pause (in milliseconds) may be specified\nas the first parameter to this method (defaults to 0). Otherwise, you may\njust specify the individual devices that should pause.</p>\n<p>If no devices are specified, a pause action will be created (using the same\nduration) for every device.</p>\n<p>When device synchroniation is enabled (the default for new <a href=\"input_exports_Actions.html\"><code>Actions</code></a>\nobjects), there is no need to specify devices as pausing one automatically\npauses the others for the same duration. In other words, the following are\nall equivalent:</p>\n<pre><code> let a1 &#61; driver.actions();\n a1.pause(100).perform();\n\n let a2 &#61; driver.actions();\n a2.pause(100, a2.keyboard()).perform();\n // Synchronization ensures a2.mouse() is automatically paused too.\n\n let a3 &#61; driver.actions();\n a3.pause(100, a3.keyboard(), a3.mouse()).perform();\n</code></pre>\n<p>When device synchronization is <em>disabled</em>, you can cause individual devices\nto pause during a tick. For example, to hold the SHIFT key down while\nmoving the mouse:</p>\n<pre><code> let actions &#61; driver.actions({async: true});\n\n actions.keyDown(Key.SHIFT);\n actions.pause(actions.mouse())  // Pause for shift down\n     .press(Button.LEFT)\n     .move({x: 10, y: 10})\n     .release(Button.LEFT);\n actions\n     .pause(\n         actions.keyboard(),  // Pause for press left\n         actions.keyboard(),  // Pause for move\n         actions.keyboard())  // Pause for release left\n    .keyUp(Key.SHIFT);\n await actions.perform();\n</code></pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["duration",[1,null,null,null,null,[[[null,null,null,["number",null,null,1,[]]],[null,null,null,["Device","selenium-webdriver/lib/input.Device",[null,null,[null,null,"input_exports_Device.html"]],null,[]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>The length of the pause to insert, in\nmilliseconds. Alternatively, the duration may be omitted (yielding a\ndefault 0 ms pause), and the first device to pause may be specified.</p>\n"]]]],["devices",[null,1,null,["Device","selenium-webdriver/lib/input.Device",[null,null,[null,null,"input_exports_Device.html"]],null,[]]],[[[null,"<p>The devices to insert the pause for. If no\ndevices are specified, the pause will be inserted for <em>all</em> devices.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["perform",[null,951,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L951"]],[[[null,"<p>Performs the configured action sequence.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["Promise",null,null,1,[[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>a promise that will resolve when all actions have\nbeen completed.</p>\n"]]]],[]],[["press",[null,814,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L814"]],[[[null,"<p>Inserts an action to press a mouse button at the mouse&#39;s current location.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["button",[1,null,null,null,null,[[[null,null,null,["Button","selenium-webdriver/lib/input.Button",[null,null,[null,null,"input_exports_Button.html"]],null,[]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>The button to press; defaults to <code>LEFT</code>.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["release",[null,825,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L825"]],[[[null,"<p>Inserts an action to release a mouse button at the mouse&#39;s current\nlocation.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["button",[1,null,null,null,null,[[[null,null,null,["Button","selenium-webdriver/lib/input.Button",[null,null,[null,null,"input_exports_Button.html"]],null,[]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>The button to release; defaults to <code>LEFT</code>.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["sendKeys",[null,790,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L790"]],[[[null,"<p>Inserts a sequence of actions to type the provided key sequence.\nFor each key, this will record a pair of <a href=\"input_exports_Actions.html#keyDown\">keyDown</a>\nand <a href=\"input_exports_Actions.html#keyUp\">keyUp</a> actions. An implication of this pairing\nis that modifier keys (e.g. <a href=\"input_exports_Key.html#SHIFT\"><code>Key.SHIFT</code></a>) will\nalways be immediately released. In other words, <code>sendKeys(Key.SHIFT, &#39;a&#39;)</code>\nis the same as typing <code>sendKeys(&#39;a&#39;)</code>, <em>not</em> <code>sendKeys(&#39;A&#39;)</code>.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["keys",[null,1,null,null,null,[[[null,null,null,["string",null,null,1,[]]],[null,null,null,["number",null,null,1,[]]]]]],[[[null,"<p>the keys to type.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]],[["synchronize",[null,659,null,[null,null,"lib/input.js"],[null,null,"https://github.com/SeleniumHQ/selenium/tree/master/javascript/node/selenium-webdriver/lib/input.js#L659"]],[[[null,"<p>Ensures the action sequence for every device referenced in this action\nsequence is the same length. For devices whose sequence is too short,\nthis will insert <a href=\"input_exports_Actions.html#pause\">pauses</a> so that every device has an\nexplicit action defined at each tick.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["devices",[null,1,null,["Device","selenium-webdriver/lib/input.Device",[null,null,[null,null,"input_exports_Device.html"]],null,[]]],[[[null,"<p>The specific devices to synchronize.\nIf unspecified, the action sequences for every device will be\nsynchronized.</p>\n"]]]]],[null,[null,null,null,["Actions","selenium-webdriver/lib/input.Actions",[null,null,[null,null,"input_exports_Actions.html"]],null,[]]],[[[null,"<p>a self reference.</p>\n"]]]],[]]],[],null,[],[],[],[["selenium-webdriver/lib/input",null,[null,null,[null,null,"input.html"]],null,[]],null,null,null,1],null,"input_exports_Actions.html","selenium-webdriver/lib/input.Actions",[],[],[],[]]]]]