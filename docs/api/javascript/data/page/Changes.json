[null,null,["Changes",[[[null,"<h2>v4.0.0-alpha.1</h2>\n<h3>Notice</h3>\n<ul><li>The minimum supported version of Node is now 8.9.0 LTS</li></ul>\n<h3>Changes to Supported Browsers</h3>\n<p>Native support has been removed for Opera and PhantomJS as the WebDriver\nimplementations for these browsers are no longer under active development.</p>\n<p>For Opera, users should be able to simply rely on testing Chrome as the Opera\nbrowser is based on Chromium (and the operadriver was a thin wrapper around\nchromedriver). For PhantomJS, users should use Chrome or Firefox in headless\nmode (see <code>example/headless.js</code>)</p>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>\n<p>Revamped the actions API to conform with the WebDriver Spec:\n<a href=\"https://www.w3.org/TR/webdriver/#actions\">https://www.w3.org/TR/webdriver/#actions</a>. For details, refer to the JS doc\non the <code>lib/input.Actions</code> class.</p>\n<p>As of January, 2018, only Firefox natively supports this new API. You can\nput the <code>Actions</code> class into &#34;bridge mode&#34; and it will attempt to translate\nmouse and keyboard actions to the legacy API (see class docs). Alternatively,\nyou may continue to use the legacy API directly via the <code>lib/actions</code> module.\n<strong>NOTE:</strong> The legacy API is considered strongly deprecated and will be\nremoved in a minor release once Google&#39;s Chrome and Microsoft&#39;s Edge browsers\nsupport the new API.</p>\n</li><li>\n<p>All window manipulation commands are now supported.</p>\n</li><li>\n<p>Added <code>driver.switchTo().parentFrame()</code></p>\n</li><li>\n<p>When a named cookie is requested, attempt to fetch it directly using the\nW3C endpoint, <code>GET /session/{session id}/cookie/{name}</code>. If this command is\nnot recognized by the remote end, fallback to fetching all cookies and then\nsearching for the desired name.</p>\n</li><li>\n<p>Replaced <code>WebElement.getSize()</code> and <code>WebElement.getLocation()</code> with a single\nmethod, <code>WebElement.getRect()</code>.</p>\n</li></ul>\n<h3>API Changes</h3>\n<ul><li>The core WebDriver API no longer uses promise manager\n<ul><li>Removed <code>index.Builder#setControlFlow()</code></li><li>The following thenable types no longer have a <code>cancel()</code> method:</li><li>The dynamically generated thenable WebDrivers created by <code>index.Builder</code></li><li><code>lib/webdriver.AlertPromise</code></li><li><code>lib/webdriver.WebElementPromise</code></li></ul>\n</li><li>Removed <code>remote/index.DriverService.prototype.stop()</code> (use <code>#kill()</code> instead)</li><li>Removed the <code>lib/actions</code> module</li><li>Removed the <code>lib/events</code> module</li><li>Removed the <code>phantomjs</code> module</li><li>Removed the &#39;opera&#39; module</li><li>Removed the promise manager from <code>lib/promise</code>, which includes the removal\nof the following exported names (replacements, if any, in parentheses):\n<ul><li>CancellableThenable</li><li>CancellationError</li><li>ControlFlow</li><li>Deferred</li><li>LONG_STACK_TRACES</li><li>MultipleUnhandledRejectionError</li><li>Promise (use native Promises)</li><li>Resolver</li><li>Scheduler</li><li>Thenable</li><li>USE_PROMISE_MANAGER</li><li>all (use Promise.all)</li><li>asap (use Promise.resolve)</li><li>captureStackTrace (use Error.captureStackTrace)</li><li>consume (use async functions)</li><li>controlFlow</li><li>createPromise (use new Promise)</li><li>defer</li><li>fulfilled (use Promise.resolve)</li><li>isGenerator</li><li>rejected (use Promise.reject)</li><li>setDefaultFlow</li><li>when (use Promise.resolve)</li></ul>\n</li><li>Changes to the <code>Builder</code> class:\n<ul><li>Added setChromeService, setEdgeService, &amp; setFirefoxService</li><li>Removed setEnableNativeEvents</li><li>Removed setScrollBehavior</li></ul>\n</li><li>Changes to <code>chrome.Driver</code>\n<ul><li>Added sendDevToolsCommand</li><li>Added setDownloadPath</li></ul>\n</li><li>Changes to <code>chrome.Options</code>\n<ul><li>Now extends the <code>Capabilities</code> class</li><li>Removed from/toCapabilities</li></ul>\n</li><li>Changes to <code>edge.Options</code>\n<ul><li>Now extends the <code>Capabilities</code> class</li><li>Removed from/toCapabilities</li></ul>\n</li><li>Changes to <code>ie.Options</code>\n<ul><li>Now extends the <code>Capabilities</code> class</li><li>Removed from/toCapabilities</li></ul>\n</li><li>Removed the <code>firefox.Binary</code> class. Custom binaries can still be selected\nusing <code>firefox.Options#setBinary()</code>. Likewise, custom binary arguments can be\nspecified with <code>firefox.Options#addArguments()</code>.</li><li>Changes to <code>firefox.Driver</code>\n<ul><li>Added installAddon(path)</li><li>Added uninstallAddon(id)</li></ul>\n</li><li>Changes to <code>firefox.Options</code>\n<ul><li>Now extends the <code>Capabilities</code> class</li><li>Removed from/toCapabilities</li><li>Removed setLoggingPreferences (was a no-op)</li><li>setProfile now only accepts a path to an existing profile</li><li>Added addExtensions</li><li>Added setPreference</li></ul>\n</li><li>Removed the <code>firefox.Profile</code> class. All of its functionality is now\nprovided directly by <code>firefox.Options</code></li><li>Removed the <code>firefox/binary</code> module</li><li>Removed the <code>firefox/profile</code> module</li><li>Changes to <code>safari.Options</code>\n<ul><li>Now extends the <code>Capabilities</code> class</li><li>Removed from/toCapabilities</li><li>Removed setCleanSession (was a no-op)</li></ul>\n</li><li>Changes to <code>lib/capabilities.Browser</code>:\n<ul><li>Removed several enum values.\n<ul><li>ANDROID (use Chrome for Android; see docs on the chrome module)</li><li>IPAD (no support available)</li><li>IPHONE (no support available)</li><li>OPERA (use Chrome)</li><li>PHANTOM_JS (use Chrome or Firefox in headless mode)</li><li>HTMLUNIT (use Chrome or Firefox in headless mode)</li></ul>\n</li></ul>\n</li><li>Changes to <code>lib/capabilities.Capabilities</code>:\n<ul><li>Removed static factory methods android(), ipad(), iphone(), opera(),\nphantomjs(), htmlunit(), and htmlunitwithjs(). Users can still manually\nconfigure capabilities for these, but their use is not recommended and\nthey will no longer be surfaced in the API.</li></ul>\n</li><li>Changes to <code>lib/error</code>:\n<ul><li>Added\n<ul><li>ElementClickInterceptedError</li><li>InsecureCertificateError</li><li>InvalidCoordinatesError</li><li>NoSuchCookieError</li></ul>\n</li><li>Removed\n<ul><li>ElementNotVisibleError</li><li>InvalidElementCoordinatesError</li></ul>\n</li></ul>\n</li><li>Changes to <code>lib/webdriver.WebDriver</code>:\n<ul><li>Dropped support for &#34;requiredCapabilities&#34; from WebDriver.createSession</li><li>actions() now returns the new <code>lib/input.Actions</code> class</li><li>Removed touchActions</li><li>Renamed schedule to execute</li><li>Removed the <code>WebDriver.attachToSession()</code> factory method. Users can just\nthe <code>WebDriver</code> constructor directly instead.</li><li>Removed the <code>call()</code> method. This was used to inject custom function calls\ninto the control flow. Now that the promise manager is no longer used,\nthis method is no longer necessary. Users are now responsible for\ncoordinating actions (ideally with async functions) and can just call\nfunctions directly instead of through <code>driver.call()</code>.</li></ul>\n</li><li>Changes to <code>lib/webdriver.WebElement</code>:\n<ul><li>Replaced getSize &amp; getLocation with getRect</li></ul>\n</li><li>Changes to <code>lib/webdriver.Alert</code>:\n<ul><li>Removed authenticateAs</li></ul>\n</li><li>Changes to <code>lib/webdriver.Options</code> (<code>driver.manage()</code>):\n<ul><li>Removed timeouts (use get/setTimeouts)</li></ul>\n</li><li>Changes to <code>lib/webdriver.Window</code> (<code>driver.manage().window()</code>):\n<ul><li>Added\n<ul><li>getRect</li><li>setRect</li><li>fullscreen</li><li>minimize</li></ul>\n</li><li>Removed (use the getRect/setRect methods)\n<ul><li>getPosition</li><li>setPosition</li><li>getSize</li><li>setSize</li></ul>\n</li></ul>\n</li><li>Removed the <code>testing/assert</code> module</li><li>Changes to <code>testing/index</code>\n<ul><li>Since the promise manager has been removed, it is no longer necessary to\nwrap the Mocha test hooks; instead, users can simply use async functions.\nThe following have all been removed:\n<ul><li>describe</li><li>before</li><li>beforeEach</li><li>after</li><li>afterEach</li><li>it</li></ul>\n</li><li>Added the <code>suite</code> function. For details, refer to the jsdoc or\n<code>example/google_search_test.js</code></li></ul>\n</li></ul>\n<h2>v3.6.0</h2>\n<h3>Bug Fixes</h3>\n<ul><li>The Capabilities factory methods should only specify the name of the browser.</li><li>Protect against the remote end sometimes not returning a list to findElements\ncommands.</li><li>Properly reset state in <code>remote.DriverService#kill()</code></li><li>The firefox module will no longer apply the preferences required by the legacy\nFirefoxDriver. These preferences were only required when using the legacy\ndriver, support for which was dropped in v3.5.0.</li></ul>\n<h3>API Changes</h3>\n<ul><li>Added new methods to <code>selenium-webdriver/firefox.Options</code>:\n<ul><li>addArguments()</li><li>headless()</li><li>windowSize()</li></ul>\n</li><li>Deprecated <code>selenium-webdriver/firefox/binary.Binary</code></li><li>Removed <code>selenium-webdriver/firefox.Options#useGeckoDriver()</code></li><li>Removed the unused <code>selenium-webdriver/firefox/profile.decode()</code></li><li>Removed methods from <code>selenium-webdriver/firefox/profile.Profile</code> that had\nno effect since support for the legacy FirefoxDriver was dropped in 3.5.0:\n<ul><li>setNativeEventsEnabled</li><li>nativeEventsEnabled</li><li>getPort</li><li>setPort</li></ul>\n</li><li>Removed <code>selenium-webdriver/firefox.ServiceBuilder#setFirefoxBinary()</code>; custom\nbinaries should be configured through the <code>firefox.Options</code> class.</li><li>Removed <code>selenium-webdriver/firefox.Capability</code>. These hold overs from the\nlegacy FirefoxDriver are no longer supported.</li></ul>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>Deprecated <code>error.ElementNotVisibleError</code> in favor of the more generic\n<code>error.ElementNotInteractableError</code>.</li><li>Support the <code>httpOnly</code> option when adding a cookie.</li></ul>\n<h2>v3.5.0</h2>\n<h3>Notice</h3>\n<p>Native support for Firefox 45 (ESR) has been removed. Users will have to connect\nto a remote Selenium server that supports Firefox 45.</p>\n<h3>Changes</h3>\n<ul><li>Removed native support for Firefox 46 and older.\n<ul><li>The <code>SELENIUM_MARIONETTE</code> enviornment variable no longer has an effect.</li><li><code>selenium-webdriver/firefox.Capability.MARIONETTE</code> is deprecated.</li><li><code>selenium-webdriver/firefox.Options#useGeckoDriver()</code> is deprecated and now a no-op.</li></ul>\n</li><li><code>firefox.Options</code> will no longer discard the <code>&#34;moz:firefoxOptions&#34;</code> set in\nuser provided capabilities (via <code>Builder.withCapabilities({})</code>). When both\nare used, the settings in <code>firefox.Options</code> will be applied <em>last</em>.</li><li>Added <code>chrome.Options#headless()</code> and <code>chrome.Options#windowSize()</code>, which\nmay be used to start Chrome in headless mode (requires Chrome 59&#43;) and to set\nthe initial window size, respectively.</li></ul>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>Added <code>error.WebDriverError#remoteStacktrace</code> to capture the stacktrace\nreported by a remote WebDriver endpoint (if any).</li><li>Fixed <code>WebElement#sendKeys</code> to send text as a string instead of an array of\nstrings.</li></ul>\n<h2>v3.4.0</h2>\n<h3>Notice</h3>\n<p>This release requires <a href=\"https://github.com/mozilla/geckodriver/releases/tag/v0.15.0\">geckodriver 0.15.0</a> or newer.</p>\n<h3>API Changes</h3>\n<ul><li>Added <code>Options#getTimeouts()</code> for retrieving the currently configured session\ntimeouts (i.e. implicit wait). This method will only work with W3C compatible\nWebDriver implementations.</li><li>Deprecated the <code>Timeouts</code> class in favor of <code>Options#setTimeouts()</code>, which\nsupports setting multiple timeouts at once.</li><li>Added support for emulating different network conditions (e.g., offline, 2G, WiFi) on Chrome.</li></ul>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>Fixed W3C response parsing, which expects response data to always be a JSON\nobject with a <code>value</code> key.</li><li>Added W3C endpoints for interacting with various types of\n<a href=\"https://w3c.github.io/webdriver/webdriver-spec.html#user-prompts\">user prompts</a>.</li><li>Added W3C endpoints for remotely executing scripts.</li><li>Added W3C endpoints to get current window handle and all windows handles.</li></ul>\n<h2>v3.3.0</h2>\n<ul><li>\n<p>Added warning log messages when the user creates new managed promises, or\nschedules unchained tasks. Users may opt in to printing these log messages\nwith</p>\n<pre><code class=\"language-js\">const {logging} &#61; require(&#39;selenium-webdriver&#39;);\nlogging.installConsoleHandler();\nlogging.getLogger(&#39;promise.ControlFlow&#39;).setLevel(logging.Level.WARNING);\n</code></pre>\n</li><li>\n<p>If the <code>JAVA_HOME</code> environment variable is set, use it to locate java.exe.</p>\n</li></ul>\n<h2>v3.2.0</h2>\n<ul><li>Release skipped to stay in sync with the main Selenium project.</li></ul>\n<h2>v3.1.0</h2>\n<ul><li>The <code>lib</code> package is once again platform agnostic (excluding <code>lib/devmode</code>).</li><li>Deprecated <code>promise.when(value, callback, errback)</code>.\nUse <code>promise.fulfilled(value).then(callback, errback)</code></li><li>Changed <code>promise.fulfilled(value)</code>, <code>promise.rejected(reason)</code> and\n<code>promise.defer()</code> to all use native promises when the promise manager is\ndisabled.</li><li>Properly handle W3C error responses to new session commands.</li><li>Updated <code>selenium-webdriver/testing</code> to export <code>describe.only</code> along with\n<code>describe.skip</code>.</li><li>Fixed <code>selenium-webdriver/lib/until.ableToSwitchToFrame</code>. It was previously\ndropping arguments and would never work.</li><li>Added the ability to use Firefox Nightly</li><li>If Firefox cannot be found in the default location, look for it on the PATH</li><li>Allow SafariDriver to use Safari Technology Preview.</li><li>Use the proper wire command for WebElement.getLocation() and\nWebElement.getSize() for W3C compliant drivers.</li></ul>\n<h2>v3.0.1</h2>\n<ul><li>More API adjustments to align with native Promises\n<ul><li>Deprecated <code>promise.fulfilled(value)</code>, use <code>promise.Promise#resolve(value)</code></li><li>Deprecated <code>promise.rejected(reason)</code>, use <code>promise.Promise#reject(reason)</code></li></ul>\n</li><li>When a <code>wait()</code> condition times out, the returned promise will now be\nrejected with an <code>error.TimeoutError</code> instead of a generic <code>Error</code> object.</li><li><code>WebDriver#wait()</code> will now throw a TypeError if an invalid wait condition is\nprovided.</li><li>Properly catch unhandled promise rejections with an action sequence (only\nimpacts when the promise manager is disabled).</li></ul>\n<h2>v3.0.0</h2>\n<ul><li>\n<p>(<strong>NOTICE</strong>) The minimum supported version of Node is now 6.9.0 LTS</p>\n</li><li>\n<p>Removed support for the SafariDriver browser extension. This has been\nreplaced by Apple&#39;s safaridriver, which is included wtih Safari 10\n(available on OS X El Capitan and macOS Sierra).</p>\n<p>To use Safari 9 or older, users will have to use an older version of Selenium.</p>\n</li><li>\n<p>geckodriver v0.11.0 or newer is now required for Firefox.</p>\n</li><li>\n<p>Fixed potential reference errors in <code>selenium-webdriver/testing</code> when users\ncreate a cycle with mocha by running with mocha&#39;s <code>--hook</code> flag.</p>\n</li><li>\n<p>Fixed <code>WebDriver.switchTo().activeElement()</code> to use the correct HTTP method\nfor compatibility with the W3C spec.</p>\n</li><li>\n<p>Update the <code>selenium-webdriver/firefox</code> module to use geckodriver&#39;s\n&#34;moz:firefoxOptions&#34; dictionary for Firefox-specific configuration values.</p>\n</li><li>\n<p>Extending the <code>selenium-webdriver/testing</code> module to support tests defined\nusing generator functions.</p>\n</li><li>\n<p>The promise manager can be disabled by setting an enviornment variable:\n<code>SELENIUM_PROMISE_MANAGER&#61;0</code>. This is part of a larger plan to remove the\npromise manager, as documented at\n<a href=\"https://github.com/SeleniumHQ/selenium/issues/2969\">https://github.com/SeleniumHQ/selenium/issues/2969</a></p>\n</li><li>\n<p>When communicating with a W3C-compliant remote end, use the atoms library for\nthe <code>WebElement.getAttribute()</code> and <code>WebElement.isDisplayed()</code> commands. This\nbehavior is consistent with the java, .net, python, and ruby clients.</p>\n</li></ul>\n<h3>API Changes</h3>\n<ul><li>Removed <code>safari.Options#useLegacyDriver()</code></li><li>Reduced the API on <code>promise.Thenable</code> for compatibility with native promises:\n<ul><li>Removed <code>#isPending()</code></li><li>Removed <code>#cancel()</code></li><li>Removed <code>#finally()</code></li></ul>\n</li><li>Changed all subclasses of <code>webdriver.WebDriver</code> to overload the static\nfunction <code>WebDriver.createSession()</code> instead of doing work in the\nconstructor. All constructors now inherit the base class&#39; function signature.\nUsers are still encouraged to use the <code>Builder</code> class instead of creating\ndrivers directly.</li><li><code>Builder#build()</code> now returns a &#34;thenable&#34; WebDriver instance, allowing users\nto immediately schedule commands (as before), or issue them through standard\npromise callbacks. This is the same pattern already employed for WebElements.</li><li>Removed <code>Builder#buildAsync()</code> as it was redundant with the new semantics of\n<code>build()</code>.</li></ul>\n<h2>v3.0.0-beta-3</h2>\n<ul><li>Fixed a bug where the promise manager would silently drop callbacks after\nrecovering from an unhandled promise rejection.</li><li>Added the <code>firefox.ServiceBuilder</code> class, which may be used to customize the\ngeckodriver used for <code>firefox.Driver</code> instances.</li><li>Added support for Safari 10 safaridriver. safaridriver may be disabled\nvia tha API, <code>safari.Options#useLegacyDriver</code>, to use the safari\nextension driver.</li><li>Updated the <code>lib/proxy</code> module to support configuring a SOCKS proxy.</li><li>For the <code>promise.ControlFlow</code>, fire the &#34;uncaughtException&#34; event in a new\nturn of the JS event loop. As a result of this change, any errors thrown by\nan event listener will propagate to the global error handler. Previously,\nthis event was fired with in the context of a (native) promise callback,\ncausing errors to be silently suppressed in the promise chain.</li></ul>\n<h3>API Changes</h3>\n<ul><li>Added <code>remote.DriverService.Builder</code> as a base class for configuring\nDriverService instances that run in a child-process. The\n<code>chrome.ServiceBuilder</code>, <code>edge.ServiceBuilder</code>, and <code>opera.ServiceBuilder</code>\nclasses now all extend this base class with browser-specific options.</li><li>For each of the ServiceBuilder clases, renamed <code>usingPort</code> and\n<code>withEnvironment</code> to <code>setPort</code> and <code>setEnvironment</code>, respectively.</li><li>Renamed <code>chrome.ServiceBuilder#setUrlBasePath</code> to <code>#setPath</code></li><li>Changed the signature of the <code>firefox.Driver</code> from <code>(config, flow, executor)</code>\nto <code>(config, executor, flow)</code>.</li><li>Exposed the <code>Condition</code> and <code>WebElementCondition</code> classes from the top-level\n<code>selenium-webdriver</code> module (these were previously only available from\n<code>lib/webdriver</code>).</li></ul>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>Updated command mappings for <a href=\"https://w3c.github.io/webdriver/webdriver-spec.html#get-window-position\">getting</a>\nand <a href=\"https://w3c.github.io/webdriver/webdriver-spec.html#set-window-position\">setting</a>\nthe window position.</li></ul>\n<h2>v3.0.0-beta-2</h2>\n<h3>API Changes</h3>\n<ul><li>Moved the <code>builder.Builder</code> class into the main module (<code>selenium-webdriver</code>).</li><li>Removed the <code>builder</code> module.</li><li>Fix <code>webdriver.WebDriver#setFileDetector</code> when driving Chrome or Firefox on a\nremote machine.</li></ul>\n<h2>v3.0.0-beta-1</h2>\n<ul><li>Allow users to set the agent used for HTTP connections through\n<code>builder.Builder#usingHttpAgent()</code></li><li>Added new wait conditions: <code>until.urlIs()</code>, <code>until.urlContains()</code>,\n<code>until.urlMatches()</code></li><li>Added work around for <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id&#61;1274924\">GeckoDriver bug</a>\nraising a type conversion error</li><li>Internal cleanup replacing uses of managed promises with native promises</li><li>Removed the mandatory use of Firefox Dev Edition, when using Marionette driver</li><li>Fixed timeouts&#39; URL</li><li>Properly send HTTP requests when using a WebDriver server proxy</li><li>Properly configure proxies when using the geckodriver</li><li><code>http.Executor</code> now accepts a promised client. The <code>builder.Builder</code> class\nwill now use this instead of a <code>command.DeferredExecutor</code> when creating\nWebDriver instances.</li><li>For Chrome and Firefox, the <code>builder.Builder</code> class will always return an\ninstanceof <code>chrome.Driver</code> and <code>firefox.Driver</code>, respectively, even when\nconfigured to use a remote server (from <code>builder.Builder#usingServer(url)</code>,\n<code>SELENIUM_REMOTE_URL</code>, etc).</li></ul>\n<h3>API Changes</h3>\n<ul><li><code>promise.Deferred</code> is no longer a thenable object.</li><li><code>Options#addCookie()</code> now takes a record object instead of 7 individual\nparameters. A TypeError will be thrown if addCookie() is called with invalid\narguments.</li><li>When adding cookies, the desired expiry must be provided as a Date or in\n<em>seconds</em> since epoch. When retrieving cookies, the expiration is always\nreturned in seconds.</li><li>Renamed <code>firefox.Options#useMarionette</code> to <code>firefox.Options#useGeckoDriver</code></li><li>Removed deprecated modules:\n<ul><li><code>selenium-webdriver/error</code> (use <code>selenium-webdriver/lib/error</code>,<br />\nor the <code>error</code> property exported by <code>selenium-webdriver</code>)</li><li><code>selenium-webdriver/executors</code> — this was not previously deprecated, but\nis no longer used.</li></ul>\n</li><li>Removed deprecated types:\n<ul><li><code>command.DeferredExecutor</code> — this was not previously deprecated, but is no\nlonger used. It can be trivially implemented by clients should it be\nneeded.</li><li><code>error.InvalidSessionIdError</code> (use <code>error.NoSuchSessionError</code>)</li><li><code>executors.DeferredExecutor</code></li><li><code>until.Condition</code> (use <code>webdriver.Condition</code>)</li><li><code>until.WebElementCondition</code> (use <code>webdriver.WebElementCondition</code>)</li><li><code>webdriver.UnhandledAlertError</code> (use <code>error.UnexpectedAlertOpenError</code>)</li></ul>\n</li><li>Removed deprecated functions:\n<ul><li><code>Deferred#cancel()</code></li><li><code>Deferred#catch()</code></li><li><code>Deferred#finally()</code></li><li><code>Deferred#isPending()</code></li><li><code>Deferred#then()</code></li><li><code>Promise#thenCatch()</code></li><li><code>Promise#thenFinally()</code></li><li><code>WebDriver#isElementPresent()</code></li><li><code>WebElement#getInnerHtml()</code></li><li><code>WebElement#getOuterHtml()</code></li><li><code>WebElement#getRawId()</code></li><li><code>WebElement#isElementPresent()</code></li></ul>\n</li><li>Removed deprecated properties:\n<ul><li><code>WebDriverError#code</code></li></ul>\n</li></ul>\n<h2>v2.53.2</h2>\n<ul><li>Changed <code>io.exists()</code> to return a rejected promise if the input path is not\na string</li><li>Deprecated <code>Promise#thenFinally()</code> - use <code>Promise#finally()</code>. The thenFinally\nshim added to the promise module in v2.53.0 will be removed in v3.0\nSorry for the churn!</li><li>FIXED: capabilities serialization now properly handles undefined vs.\nfalse-like values.</li><li>FIXED: properly handle responses from the remote end in\n<code>WebDriver.attachToSession</code></li></ul>\n<h2>v2.53.1</h2>\n<ul><li>FIXED: for consistency with the other language bindings, <code>remote.FileDetector</code>\nwill ignore paths that refer to a directory.</li></ul>\n<h2>v2.53.0</h2>\n<h3>Change Summary</h3>\n<ul><li>\n<p>Added preliminary support for Marionette, Mozilla&#39;s WebDriver implementation\nfor Firefox. Marionette may be enabled via the API,\n<code>firefox.Options#useMarionette</code>, or by setting the <code>SELENIUM_MARIONETTE</code>\nenvironment variable.</p>\n</li><li>\n<p>Moved all logic for parsing and interpreting responses from the remote end\ninto the individual <code>command.Executor</code> implementations.</p>\n</li><li>\n<p>For consistency with the other Selenium language bindings,\n<code>WebDriver#isElementPresent()</code> and <code>WebElement#isElementPresent()</code> have\nbeen deprecated. These methods will be removed in v3.0. Use the findElements\ncommand to test for the presence of an element:</p>\n<pre><code>driver.findElements(By.css(&#39;.foo&#39;)).then(found &#61;&gt; !!found.length);\n</code></pre>\n</li><li>\n<p>Added support for W3C-spec compliant servers.</p>\n</li><li>\n<p>For consistent naming, deprecating <code>error.InvalidSessionIdError</code> in favor of\n<code>error.NoSuchSessionError</code>.</p>\n</li><li>\n<p>Moved the <code>error</code> module to <code>lib/error</code> so all core modules are co-located.\nThe top-level <code>error</code> module will be removed in v3.0.</p>\n</li><li>\n<p>Moved <code>until.Condition</code> and <code>until.WebElementCondition</code> to the webdriver\nmodule to break a circular dependency.</p>\n</li><li>\n<p>Added support for setting the username and password in basic auth pop-up\ndialogs (currently IE only).</p>\n</li><li>\n<p>Deprecated <code>WebElement#getInnerHtml()</code> and <code>WebEleemnt#getOuterHtml()</code></p>\n</li><li>\n<p>Deprecated <code>Promise#thenCatch()</code> - use <code>Promise#catch()</code> instead</p>\n</li><li>\n<p>Deprecated <code>Promise#thenFinally()</code> - use <code>promise.thenFinally()</code> instead</p>\n</li><li>\n<p>FIXED: <code>io.findInPath()</code> will no longer match against directories that have\nthe same basename as the target file.</p>\n</li><li>\n<p>FIXED: <code>phantomjs.Driver</code> now takes a third argument that defines the path to\na log file to use for the phantomjs executable&#39;s output. This may be quickly\nset at runtime with the <code>SELENIUM_PHANTOMJS_LOG</code> environment variable.</p>\n</li></ul>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>Changed <code>element.sendKeys(...)</code> to send the key sequence as an array where\neach element defines a single key. The legacy wire protocol permits arrays\nwhere each element is a string of arbitrary length. This change is solely\nat the protocol level and should have no user-visible effect.</li></ul>\n<h2>v2.52.0</h2>\n<h3>Notice</h3>\n<p>Starting with v2.52.0, each release of selenium-webdriver will support the\nlatest <em>minor</em> LTS and stable Node releases. All releases between the LTS and\nstable release will have best effort support. Further details are available in\nthe selenium-webdriver package README.</p>\n<h3>Change Summary</h3>\n<ul><li>Add support for Microsoft&#39;s Edge web browser</li><li>Added <code>webdriver.Builder#buildAsync()</code>, which returns a promise that will be\nfulfilled with the newly created WebDriver instance once the associated\nbrowser has been full initialized. This is purely a convenient alternative\nto the existing build() method as the WebDriver class will always defer\ncommands until it has a fully created browser.</li><li>Added <code>firefox.Profile#setHost()</code> which may be used to set the host that\nthe FirefoxDriver&#39;s server listens for commands on. The server uses\n&#34;localhost&#34; by default.</li><li>Added <code>promise.Promise#catch()</code> for API compatibility with native Promises.\n<code>promise.Promise#thenCatch()</code> is not yet deprecated, but it simply\ndelegates to <code>catch</code>.</li><li>Changed some <code>io</code> operations to use native promises.</li><li>Changed <code>command.Executor#execute()</code> and <code>HttpClient#send()</code> to return\npromises instead of using callback passing.</li><li>Replaced the <code>Serializable</code> class with an internal, Symbol-defined method.</li><li>Changed the <code>Capabilities</code> class to extend the native <code>Map</code> type.</li><li>Changed the <code>Capabilities.has(key)</code> to only test if a capability has been set\n(Map semantics). To check whether the value is true, use <code>get(key)</code>.</li><li>Deprecated <code>executors.DeferredExecutor</code> in favor of\n<code>lib/command.DeferredExecutor</code>.</li><li>API documentation is no longer distributed with the npm package, but remains\navailable at <a href=\"http://seleniumhq.github.io/selenium/docs/api/javascript/\">http://seleniumhq.github.io/selenium/docs/api/javascript/</a></li><li>Rewrote the <code>error</code> module to export an Error subtype for each type of error\ndefined in the <a href=\"https://w3c.github.io/webdriver/webdriver-spec.html#handling-errors\">W3C WebDriver spec</a>.</li><li>Changed the <code>http.Request</code> and <code>http.Response</code> classes to store headers in\nmaps instead of object literals.</li><li>Updated <code>ws</code> dependency to version <code>1.0.1</code>.</li><li>Removed fluent predicates &#34;is&#34; and &#34;not&#34; from the experimental\n<code>testing/assert</code> module.</li><li>Wait conditions that locate an element, or that wait on an element&#39;s state,\nwill return a WebElementPromise.</li><li>Lots of internal clean-up to break selenium-webdriver&#39;s long standing\ndependency on Google&#39;s Closure library.</li></ul>\n<h3>Changes for W3C WebDriver Spec Compliance</h3>\n<ul><li>Updated the <code>By</code> locators that are not in the W3C spec to delegated to using\nCSS selectors: <code>By.className</code>, <code>By.id</code>, <code>By.name</code>, and <code>By.tagName</code>.</li></ul>\n<h2>v2.49-51</h2>\n<ul><li><em>Releases skipped to stay in sync with the rest of the Selenium project</em></li></ul>\n<h2>v2.48.2</h2>\n<ul><li>Added <code>WebElement#takeScreenshot()</code>.</li><li>More adjustments to promise callback tracking.</li></ul>\n<h2>v2.48.1</h2>\n<ul><li>FIXED: Adjusted how the control flow tracks promise callbacks to avoid a\npotential deadlock.</li></ul>\n<h2>v2.48.0</h2>\n<ul><li>\n<p>Node v0.12.x users must run with --harmony. <em>This is the last release that\nwill support v0.12.x</em></p>\n</li><li>\n<p>FIXED: (Promise/A&#43; compliance) When a promise is rejected with a thenable,\nthe promise adopts the thenable as its rejection reason instead of waiting\nfor it to settle. The previous (incorrect) behavior was hidden by bugs in\nthe <code>promises-aplus-tests</code> compliance test suite that were fixed in version\n<code>2.1.1</code>.</p>\n</li><li>\n<p>FIXED: the <code>webdriver.promise.ControlFlow</code> now has a consistent execution\norder for tasks/callbacks scheduled in different turns of the JS event loop.\nRefer to the <code>webdriver.promise</code> documentation for more details.</p>\n</li><li>\n<p>FIXED: do not drop user auth from the WebDriver server URL.</p>\n</li><li>\n<p>FIXED: a single <code>firefox.Binary</code> instance may be used to configure and\nlaunch multiple FirefoxDriver sessions.</p>\n<pre><code>var binary &#61; new firefox.Binary();\nvar options &#61; new firefox.Options().setBinary(binary);\nvar builder &#61; new Builder().setFirefoxOptions(options);\n\nvar driver1 &#61; builder.build();\nvar driver2 &#61; builder.build();\n</code></pre>\n</li><li>\n<p>FIXED: zip files created for transfer to a remote WebDriver server are no\nlonger compressed. If the zip contained a file that was already compressed,\nthe server would return an &#34;invalid code lengths set&#34; error.</p>\n</li><li>\n<p>FIXED: Surfaced the <code>loopback</code> option to <code>remote/SeleniumServer</code>. When set,\nthe server will be accessed using the current host&#39;s loopback address.</p>\n</li></ul>\n<h2>v2.47.0</h2>\n<h3>Notice</h3>\n<p>This is the last release for <code>selenium-webdriver</code> that will support ES5.\nSubsequent releases will depend on ES6 features that are enabled by\n<a href=\"https://nodejs.org/en/docs/es6/\">default</a> in Node v4.0.0. Node v0.12.x will\ncontinue to be supported, but will require setting the <code>--harmony</code> flag.</p>\n<h3>Change Summary</h3>\n<ul><li>Add support for <a href=\"https://nodejs.org/en/blog/release/v4.0.0/\">Node v4.0.0</a>\n<ul><li>Updated <code>ws</code> dependency from <code>0.7.1</code> to <code>0.8.0</code></li></ul>\n</li><li>Bumped the minimum supported version of Node from <code>0.10.x</code> to <code>0.12.x</code>. This\nis in accordance with the Node support policy established in <code>v2.45.0</code>.</li></ul>\n<h2>v2.46.1</h2>\n<ul><li>Fixed internal module loading on Windows.</li><li>Fixed error message format on timeouts for <code>until.elementLocated()</code>\nand <code>until.elementsLocated()</code>.</li></ul>\n<h2>v2.46.0</h2>\n<ul><li>Exposed a new logging API via the <code>webdriver.logging</code> module. For usage, see\n<code>example/logging.js</code>.</li><li>Added support for using a proxy server for WebDriver commands.\nSee <code>Builder#usingWebDriverProxy()</code> for more info.</li><li>Removed deprecated functions:\n<ul><li>Capabilities#toJSON()</li><li>UnhandledAlertError#getAlert()</li><li>chrome.createDriver()</li><li>phantomjs.createDriver()</li><li>promise.ControlFlow#annotateError()</li><li>promise.ControlFlow#await()</li><li>promise.ControlFlow#clearHistory()</li><li>promise.ControlFlow#getHistory()</li></ul>\n</li><li>Removed deprecated enum values: <code>ErrorCode.NO_MODAL_DIALOG_OPEN</code> and\n<code>ErrorCode.MODAL_DIALOG_OPENED</code>. Use <code>ErrorCode.NO_SUCH_ALERT</code> and\n<code>ErrorCode.UNEXPECTED_ALERT_OPEN</code>, respectively.</li><li>FIXED: The <code>promise.ControlFlow</code> will maintain state for promise chains\ngenerated in a loop.</li><li>FIXED: Correct serialize target elements used in an action sequence.</li><li>FIXED: <code>promise.ControlFlow#wait()</code> now has consistent semantics for an\nomitted or 0-timeout: it will wait indefinitely.</li><li>FIXED: <code>remote.DriverService#start()</code> will now fail if the child process dies\nwhile waiting for the server to start accepting requests. Previously, start\nwould continue to poll the server address until the timeout expired.</li><li>FIXED: Skip launching Firefox with the <code>-silent</code> flag to preheat the profile.\nStarting with Firefox 38, this would cause the browser to crash. This step,\nwhich was first introduced for Selenium&#39;s java client back with Firefox 2,\nno longer appears to be required.</li><li>FIXED: 8564: <code>firefox.Driver#quit()</code> will wait for the Firefox process to\nterminate before deleting the temporary webdriver profile. This eliminates a\nrace condition where Firefox would write profile data during shutdown,\ncausing the <code>rm -rf</code> operation on the profile directory to fail.</li></ul>\n<h2>v2.45.1</h2>\n<ul><li>FIXED: 8548: Task callbacks are once again dropped if the task was cancelled\ndue to a previously uncaught error within the frame.</li><li>FIXED: 8496: Extended the <code>chrome.Options</code> API to cover all configuration\noptions (e.g. mobile emulation and performance logging) documented on the\nChromeDriver <a href=\"https://sites.google.com/a/chromium.org/chromedriver/capabilities\">project site</a>.</li></ul>\n<h2>v2.45.0</h2>\n<h3>Important Policy Change</h3>\n<p>Starting with the 2.45.0 release, selenium-webdriver will support the last\ntwo stable minor releases for Node. For 2.45.0, this means Selenium will\nsupport Node 0.10.x and 0.12.x. Support for the intermediate, un-stable release\n(0.11.x) is &#34;best-effort&#34;. This policy will be re-evaluated once Node has a\nmajor version release (i.e. 1.0.0).</p>\n<h3>Change Summary</h3>\n<ul><li>\n<p>Added native browser support for Internet Explorer, Opera 26&#43;, and Safari</p>\n</li><li>\n<p>With the release of <a href=\"http://blog.nodejs.org/2015/02/06/node-v0-12-0-stable/\">Node 0.12.0</a>\n(finally!), the minimum supported version of Node is now <code>0.10.x</code>.</p>\n</li><li>\n<p>The <code>promise</code> module is now <a href=\"https://promisesaplus.com/\">Promises/A&#43;</a>\ncompliant. The biggest compliance change is that promise callbacks are now\ninvoked in a future turn of the JS event loop. For example:</p>\n<pre><code>  var promise &#61; require(&#39;selenium-webdriver&#39;).promise;\n  console.log(&#39;start&#39;);\n  promise.fulfilled().then(function() {\n    console.log(&#39;middle&#39;);\n  });\n  console.log(&#39;end&#39;);\n\n  // Output in selenium-webdriver&#64;2.44.0\n  // start\n  // middle\n  // end\n  //\n  // Output in selenium-webdriver&#64;2.45.0\n  // start\n  // end\n  // middle\n</code></pre>\n<p>The <code>promise.ControlFlow</code> class has been updated to track the asynchronous\nbreaks required by Promises/A&#43;, so there are no changes to task execution\norder.</p>\n</li><li>\n<p>Updated how errors are annotated on failures. When a task fails, the\nstacktrace from when that task was scheduled is appended to the rejection\nreason with a <code>From:</code> prefix (if it is an Error object). For example:</p>\n<pre><code>  var driver &#61; new webdriver.Builder().forBrowser(&#39;chrome&#39;).build();\n  driver.get(&#39;http://www.google.com/ncr&#39;);\n  driver.call(function() {\n    driver.wait(function() {\n      return driver.isElementPresent(webdriver.By.id(&#39;not-there&#39;));\n    }, 2000, &#39;element not found&#39;);\n  });\n</code></pre>\n<p>This code will fail an error like:</p>\n<pre><code>  Error: element not found\n  Wait timed out after 2002ms\n      at &lt;stack trace&gt;\n  From: Task: element not found\n      at &lt;stack trace&gt;\n  From: Task: WebDriver.call(function)\n      at &lt;stack trace&gt;\n</code></pre>\n</li><li>\n<p>Changed the format of strings returned by <code>promise.ControlFlow#getSchedule</code>.\nThis function now accepts a boolean to control whether the returned string\nshould include the stacktraces for when each task was scheduled.</p>\n</li><li>\n<p>Deprecating <code>promise.ControlFlow#getHistory</code>,\n<code>promise.ControlFlow#clearHistory</code>, and <code>promise.ControlFlow#annotateError</code>.\nThese functions were all intended for internal use and are no longer\nnecessary, so they have been made no-ops.</p>\n</li><li>\n<p><code>WebDriver.wait()</code> may now be used to wait for a promise to resolve, with\nan optional timeout. Refer to the API documentation for more information.</p>\n</li><li>\n<p>Added support for copying files to a remote Selenium via <code>sendKeys</code> to test\nfile uploads. Refer to the API documentation for more information. Sample\nusage included in <code>test/upload_test.js</code></p>\n</li><li>\n<p>Expanded the interactions API to include touch actions.\nSee <code>WebDriver.touchActions()</code>.</p>\n</li><li>\n<p>FIXED: 8380: <code>firefox.Driver</code> will delete its temporary profile on <code>quit</code>.</p>\n</li><li>\n<p>FIXED: 8306: Stack overflow in promise callbacks eliminated.</p>\n</li><li>\n<p>FIXED: 8221: Added support for defining custom command mappings. Includes\nsupport for PhantomJS&#39;s <code>executePhantomJS</code> (requires PhantomJS 1.9.7 or\nGhostDriver 1.1.0).</p>\n</li><li>\n<p>FIXED: 8128: When the FirefoxDriver marshals an object to the page for\n<code>executeScript</code>, it defines additional properties (required by the driver&#39;s\nimplementation). These properties will no longer be enumerable and should\nbe omitted (i.e. they won&#39;t show up in JSON.stringify output).</p>\n</li><li>\n<p>FIXED: 8094: The control flow will no longer deadlock when a task returns\na promise that depends on the completion of sub-tasks.</p>\n</li></ul>\n<h2>v2.44.0</h2>\n<ul><li>\n<p>Added the <code>until</code> module, which defines common explicit wait conditions.\nSample usage:</p>\n<pre><code>  var firefox &#61; require(&#39;selenium-webdriver/firefox&#39;),\n      until &#61; require(&#39;selenium-webdriver/until&#39;);\n\n  var driver &#61; new firefox.Driver();\n  driver.get(&#39;http://www.google.com/ncr&#39;);\n  driver.wait(until.titleIs(&#39;Google Search&#39;), 1000);\n</code></pre>\n</li><li>\n<p>FIXED: 8000: <code>Builder.forBrowser()</code> now accepts an empty string since some\nWebDriver implementations ignore the value. A value must still be specified,\nhowever, since it is a required field in WebDriver&#39;s wire protocol.</p>\n</li><li>\n<p>FIXED: 7994: The <code>stacktrace</code> module will not modify stack traces if the\ninitial parse fails (e.g. the user defined <code>Error.prepareStackTrace</code>)</p>\n</li><li>\n<p>FIXED: 5855: Added a module (<code>until</code>) that defines several common conditions\nfor use with explicit waits. See updated examples for usage.</p>\n</li></ul>\n<h2>v2.43.5</h2>\n<ul><li>FIXED: 7905: <code>Builder.usingServer(url)</code> once again returns <code>this</code> for\nchaining.</li></ul>\n<h2>v2.43.2-4</h2>\n<ul><li>No changes; version bumps while attempting to work around an issue with\npublishing to npm (a version string may only be used once).</li></ul>\n<h2>v2.43.1</h2>\n<ul><li>Fixed an issue with flakiness when setting up the Firefox profile that could\nprevent the driver from initializing properly.</li></ul>\n<h2>v2.43.0</h2>\n<ul><li>\n<p>Added native support for Firefox - the Java Selenium server is no longer\nrequired.</p>\n</li><li>\n<p>Added support for generator functions to <code>ControlFlow#execute</code> and\n<code>ControlFlow#wait</code>. For more information, see documentation on\n<code>webdriver.promise.consume</code>. Requires harmony support (run with\n<code>node --harmony-generators</code> in <code>v0.11.x</code>).</p>\n</li><li>\n<p>Various improvements to the <code>Builder</code> API. Notably, the <code>build()</code> function\nwill no longer default to attempting to use a server at\n<code>http://localhost:4444/wd/hub</code> if it cannot start a browser directly -\nyou must specify the WebDriver server with <code>usingServer(url)</code>. You can\nalso set the target browser and WebDriver server through a pair of\nenvironment variables. See the documentation on the <code>Builder</code> constructor\nfor more information.</p>\n</li><li>\n<p>For consistency with the other language bindings, added browser specific\nclasses that can be used to start a browser without the builder.</p>\n<pre><code>  var webdriver &#61; require(&#39;selenium-webdriver&#39;)\n      chrome &#61; require(&#39;selenium-webdriver/chrome&#39;);\n\n  // The following are equivalent.\n  var driver1 &#61; new webdriver.Builder().forBrowser(&#39;chrome&#39;).build();\n  var driver2 &#61; new chrome.Driver();\n</code></pre>\n</li><li>\n<p>Promise A&#43; compliance: a promise may no longer resolve to itself.</p>\n</li><li>\n<p>For consistency with other language bindings, deprecated\n<code>UnhandledAlertError#getAlert</code> and added <code>#getAlertText</code>.\n<code>getAlert</code> will be removed in <code>2.45.0</code>.</p>\n</li><li>\n<p>FIXED: 7641: Deprecated <code>ErrorCode.NO_MODAL_DIALOG_OPEN</code> and\n<code>ErrorCode.MODAL_DIALOG_OPENED</code> in favor of the new\n<code>ErrorCode.NO_SUCH_ALERT</code> and <code>ErrorCode.UNEXPECTED_ALERT_OPEN</code>,\nrespectively.</p>\n</li><li>\n<p>FIXED: 7563: Mocha integration no longer disables timeouts. Default Mocha\ntimeouts apply (2000 ms) and may be changed using <code>this.timeout(ms)</code>.</p>\n</li><li>\n<p>FIXED: 7470: Make it easier to create WebDriver instances in custom flows for\nparallel execution.</p>\n</li></ul>\n<h2>v2.42.1</h2>\n<ul><li>FIXED: 7465: Fixed <code>net.getLoopbackAddress</code> on Windows</li><li>FIXED: 7277: Support <code>done</code> callback in Mocha&#39;s BDD interface</li><li>FIXED: 7156: <code>Promise#thenFinally</code> should not suppress original error</li></ul>\n<h2>v2.42.0</h2>\n<ul><li>Removed deprecated functions <code>Promise#addCallback()</code>,\n<code>Promise#addCallbacks()</code>, <code>Promise#addErrback()</code>, and <code>Promise#addBoth()</code>.</li><li>Fail with a more descriptive error if the server returns a malformed redirect</li><li>FIXED: 7300: Connect to ChromeDriver using the loopback address since\nChromeDriver 2.10.267517 binds to localhost by default.</li><li>FIXED: 7339: Preserve wrapped test function&#39;s string representation for\nMocha&#39;s BDD interface.</li></ul>\n<h2>v2.41.0</h2>\n<ul><li>FIXED: 7138: export logging API from webdriver module.</li><li>FIXED: 7105: beforeEach/it/afterEach properly bind <code>this</code> for Mocha tests.</li></ul>\n<h2>v2.40.0</h2>\n<ul><li>API documentation is now included in the docs directory.</li><li>Added utility functions for working with an array of promises:\n<code>promise.all</code>, <code>promise.map</code>, and <code>promise.filter</code></li><li>Introduced <code>Promise#thenCatch()</code> and <code>Promise#thenFinally()</code>.</li><li>Deprecated <code>Promise#addCallback()</code>, <code>Promise#addCallbacks()</code>,\n<code>Promise#addErrback()</code>, and <code>Promise#addBoth()</code>.</li><li>Removed deprecated function <code>webdriver.WebDriver#getCapability</code>.</li><li>FIXED: 6826: Added support for custom locators.</li></ul>\n<h2>v2.39.0</h2>\n<ul><li>Version bump to stay in sync with the Selenium project.</li></ul>\n<h2>v2.38.1</h2>\n<ul><li>FIXED: 6686: Changed <code>webdriver.promise.Deferred#cancel()</code> to silently no-op\nif the deferred has already been resolved.</li></ul>\n<h2>v2.38.0</h2>\n<ul><li>When a promise is rejected, always annotate the stacktrace with the parent\nflow state so users can identify the source of an error.</li><li>Updated tests to reflect features not working correctly in the SafariDriver\n(cookie management and proxy support; see issues 5051, 5212, and 5503)</li><li>FIXED: 6284: For mouse moves, correctly omit the x/y offsets if not\nspecified as a function argument (instead of passing (0,0)).</li><li>FIXED: 6471: Updated documentation on <code>webdriver.WebElement#getAttribute</code></li><li>FIXED: 6612: On Unix, use the default IANA ephemeral port range if unable to\nretrieve the current system&#39;s port range.</li><li>FIXED: 6617: Avoid triggering the node debugger when initializing the\nstacktrace module.</li><li>FIXED: 6627: Safely rebuild chrome.Options from a partial JSON spec.</li></ul>\n<h2>v2.37.0</h2>\n<ul><li>FIXED: 6346: The remote.SeleniumServer class now accepts JVM arguments using\nthe <code>jvmArgs</code> option.</li></ul>\n<h2>v2.36.0</h2>\n<ul><li><em>Release skipped to stay in sync with main Selenium project.</em></li></ul>\n<h2>v2.35.2</h2>\n<ul><li>FIXED: 6200: Pass arguments to the Selenium server instead of to the JVM.</li></ul>\n<h2>v2.35.1</h2>\n<ul><li>FIXED: 6090: Changed example scripts to use chromedriver.</li></ul>\n<h2>v2.35.0</h2>\n<ul><li>Version bump to stay in sync with the Selenium project.</li></ul>\n<h2>v2.34.1</h2>\n<ul><li>FIXED: 6079: The parent process should not wait for spawn driver service\nprocesses (chromedriver, phantomjs, etc.)</li></ul>\n<h2>v2.34.0</h2>\n<ul><li>\n<p>Added the <code>selenium-webdriver/testing/assert</code> module. This module\nsimplifies writing assertions against promised values (see\nexample in module documentation).</p>\n</li><li>\n<p>Added the <code>webdriver.Capabilities</code> class.</p>\n</li><li>\n<p>Added native support for the ChromeDriver. When using the <code>Builder</code>,\nrequesting chrome without specifying a remote server URL will default to\nthe native ChromeDriver implementation.  The\n<a href=\"https://code.google.com/p/chromedriver/downloads/list\">ChromeDriver server</a>\nmust be downloaded separately.</p>\n<pre><code>  // Will start ChromeDriver locally.\n  var driver &#61; new webdriver.Builder().\n      withCapabilities(webdriver.Capabilities.chrome()).\n      build();\n\n  // Will start ChromeDriver using the remote server.\n  var driver &#61; new webdriver.Builder().\n      withCapabilities(webdriver.Capabilities.chrome()).\n      usingServer(&#39;http://server:1234/wd/hub&#39;).\n      build();\n</code></pre>\n</li><li>\n<p>Added support for configuring proxies through the builder. For examples, see\n<code>selenium-webdriver/test/proxy_test</code>.</p>\n</li><li>\n<p>Added native support for PhantomJS.</p>\n</li><li>\n<p>Changed signature of <code>SeleniumServer</code> to <code>SeleniumServer(jar, options)</code>.</p>\n</li><li>\n<p>Tests are now included in the npm published package. See <code>README.md</code> for\nexecution instructions</p>\n</li><li>\n<p>Removed the deprecated <code>webdriver.Deferred#resolve</code> and\n<code>webdriver.promise.resolved</code> functions.</p>\n</li><li>\n<p>Removed the ability to connect to an existing session from the Builder. This\nfeature is intended for use with the browser-based client.</p>\n</li></ul>\n<h2>v2.33.0</h2>\n<ul><li>Added support for WebDriver&#39;s logging API</li><li>FIXED: 5511: Added webdriver.manage().timeouts().pageLoadTimeout(ms)</li></ul>\n<h2>v2.32.1</h2>\n<ul><li>FIXED: 5541: Added missing return statement for windows in\n<code>portprober.findFreePort()</code></li></ul>\n<h2>v2.32.0</h2>\n<ul><li>Added the <code>selenium-webdriver/testing</code> package, which provides a basic\nframework for writing tests using Mocha. See\n<code>selenium-webdriver/example/google_search_test.js</code> for usage.</li><li>For Promises/A&#43; compatibility, backing out the change in 2.30.0 that ensured\nrejections were always Error objects. Rejection reasons are now left as is.</li><li>Removed deprecated functions originally scheduled for removal in 2.31.0\n<ul><li>promise.Application.getInstance()</li><li>promise.ControlFlow#schedule()</li><li>promise.ControlFlow#scheduleTimeout()</li><li>promise.ControlFlow#scheduleWait()</li></ul>\n</li><li>Renamed some functions for consistency with Promises/A&#43; terminology. The\noriginal functions have been deprecated and will be removed in 2.34.0:\n<ul><li>promise.resolved() -&gt; promise.fulfilled()</li><li>promise.Deferred#resolve() -&gt; promise.Deferred#fulfill()</li></ul>\n</li><li>FIXED: remote.SeleniumServer#stop now shuts down within the active control\nflow, allowing scripts to finish. Use #kill to shutdown immediately.</li><li>FIXED: 5321: cookie deletion commands</li></ul>\n<h2>v2.31.0</h2>\n<ul><li>Added an example script.</li><li>Added a class for controlling the standalone Selenium server (server\navailable separately)</li><li>Added a portprober for finding free ports</li><li>FIXED: WebElements now belong to the same flow as their parent driver.</li></ul>\n<h2>v2.30.0</h2>\n<ul><li>Ensures promise rejections are always Error values.</li><li>Version bump to keep in sync with the Selenium project.</li></ul>\n<h2>v2.29.1</h2>\n<ul><li>Fixed a bug that could lead to an infinite loop.</li><li>Added a README.md</li></ul>\n<h2>v2.29.0</h2>\n<ul><li>\n<p>Initial release for npm:</p>\n<pre><code>  npm install selenium-webdriver\n</code></pre>\n</li></ul>\n"]]]]]