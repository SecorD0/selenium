<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>DefaultSelenium Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="DefaultSelenium class" /><meta name="System.Keywords" content="Selenium.DefaultSelenium class" /><meta name="System.Keywords" content="DefaultSelenium class, about DefaultSelenium class" /><meta name="Microsoft.Help.F1" content="Selenium.DefaultSelenium" /><meta name="Microsoft.Help.Id" content="T:Selenium.DefaultSelenium" /><meta name="Description" content="Defines an object that runs Selenium commands. Element Locators Element Locators tell Selenium which HTML element a command refers to." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Selenium" /><meta name="file" content="T_Selenium_DefaultSelenium" /><meta name="guid" content="T_Selenium_DefaultSelenium" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">DefaultSelenium Class</td><td class="OH_tdRunningTitleColumn">WebDriver</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><p><strong>Note: This API is now obsolete.</strong></p><div class="summary">Defines an object that runs Selenium commands.
            
            <h3><a name="locators" />Element Locators</h3><p>
            Element Locators tell Selenium which HTML element a command refers to.
            The format of a locator is:</p><blockquote><em>locatorType</em><strong>=</strong><em>argument</em></blockquote><p>
            We support the following strategies for locating elements:
            </p><ul><li><strong>identifier</strong>=<em>id</em>: 
            Select the element with the specified @id attribute. If no match is
            found, select the first element whose @name attribute is <em>id</em>.
            (This is normally the default; see below.)</li><li><strong>id</strong>=<em>id</em>:
            Select the element with the specified @id attribute.</li><li><strong>name</strong>=<em>name</em>:
            Select the first element with the specified @name attribute.
            <ul class="first last simple"><li>username</li><li>name=username</li></ul><p>The name may optionally be followed by one or more <em>element-filters</em>, separated from the name by whitespace.  If the <em>filterType</em> is not specified, <strong>value</strong> is assumed.</p><ul class="first last simple"><li>name=flavour value=chocolate</li></ul></li><li><strong>dom</strong>=<em>javascriptExpression</em>: 
            
            Find an element by evaluating the specified string.  This allows you to traverse the HTML Document Object
            Model using JavaScript.  Note that you must not return a value in this string; simply make it the last expression in the block.
            <ul class="first last simple"><li>dom=document.forms['myForm'].myDropdown</li><li>dom=document.images[56]</li><li>dom=function foo() { return document.links[1]; }; foo();</li></ul></li><li><strong>xpath</strong>=<em>xpathExpression</em>: 
            Locate an element using an XPath expression.
            <ul class="first last simple"><li>xpath=//img[@alt='The image alt text']</li><li>xpath=//table[@id='table1']//tr[4]/td[2]</li><li>xpath=//a[contains(@href,'#id1')]</li><li>xpath=//a[contains(@href,'#id1')]/@class</li><li>xpath=(//table[@class='stylee'])//th[text()='theHeaderText']/../td</li><li>xpath=//input[@name='name2' and @value='yes']</li><li>xpath=//*[text()="right"]</li></ul></li><li><strong>link</strong>=<em>textPattern</em>:
            Select the link (anchor) element which contains text matching the
            specified <em>pattern</em>.
            <ul class="first last simple"><li>link=The link text</li></ul></li><li><strong>css</strong>=<em>cssSelectorSyntax</em>:
            Select the element using css selectors. Please refer to <a href="http://www.w3.org/TR/REC-CSS2/selector.html">CSS2 selectors</a>, <a href="http://www.w3.org/TR/2001/CR-css3-selectors-20011113/">CSS3 selectors</a> for more information. You can also check the TestCssLocators test in the selenium test suite for an example of usage, which is included in the downloaded selenium core package.
            <ul class="first last simple"><li>css=a[href="#id3"]</li><li>css=span#firstChild + span</li></ul><p>Currently the css selector locator supports all css1, css2 and css3 selectors except namespace in css3, some pseudo classes(:nth-of-type, :nth-last-of-type, :first-of-type, :last-of-type, :only-of-type, :visited, :hover, :active, :focus, :indeterminate) and pseudo elements(::first-line, ::first-letter, ::selection, ::before, ::after). </p></li><li><strong>ui</strong>=<em>uiSpecifierString</em>:
            Locate an element by resolving the UI specifier string to another locator, and evaluating it. See the <a href="http://svn.openqa.org/fisheye/browse/~raw,r=trunk/selenium/trunk/src/main/resources/core/scripts/ui-doc.html">Selenium UI-Element Reference</a> for more details.
            <ul class="first last simple"><li>ui=loginPages::loginButton()</li><li>ui=settingsPages::toggle(label=Hide Email)</li><li>ui=forumPages::postBody(index=2)//a[2]</li></ul></li></ul><p>
            Without an explicit locator prefix, Selenium uses the following default
            strategies:
            </p><ul class="simple"><li><strong>dom</strong>, for locators starting with "document."</li><li><strong>xpath</strong>, for locators starting with "//"</li><li><strong>identifier</strong>, otherwise</li></ul><h3><a name="element-filters">Element Filters</a></h3><blockquote><p>Element filters can be used with a locator to refine a list of candidate elements.  They are currently used only in the 'name' element-locator.</p><p>Filters look much like locators, ie.</p><blockquote><em>filterType</em><strong>=</strong><em>argument</em></blockquote><p>Supported element-filters are:</p><p><strong>value=</strong><em>valuePattern</em></p><blockquote>
            Matches elements based on their values.  This is particularly useful for refining a list of similarly-named toggle-buttons.</blockquote><p><strong>index=</strong><em>index</em></p><blockquote>
            Selects a single element based on its position in the list (offset from zero).</blockquote></blockquote><h3><a name="patterns" />String-match Patterns</h3><p>
            Various Pattern syntaxes are available for matching string values:
            </p><ul><li><strong>glob:</strong><em>pattern</em>:
            Match a string against a "glob" (aka "wildmat") pattern. "Glob" is a
            kind of limited regular-expression syntax typically used in command-line
            shells. In a glob pattern, "*" represents any sequence of characters, and "?"
            represents any single character. Glob patterns match against the entire
            string.</li><li><strong>regexp:</strong><em>regexp</em>:
            Match a string using a regular-expression. The full power of JavaScript
            regular-expressions is available.</li><li><strong>regexpi:</strong><em>regexpi</em>:
            Match a string using a case-insensitive regular-expression.</li><li><strong>exact:</strong><em>string</em>:
            
            Match a string exactly, verbatim, without any of that fancy wildcard
            stuff.</li></ul><p>
            If no pattern prefix is specified, Selenium assumes that it's a "glob"
            pattern.
            </p><p>
            For commands that return multiple values (such as verifySelectOptions),
            the string being matched is a comma-separated list of the return values,
            where both commas and backslashes in the values are backslash-escaped.
            When providing a pattern, the optional matching syntax (i.e. glob,
            regexp, etc.) is specified once, as usual, at the beginning of the
            pattern.
            </p></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Inheritance Hierarchy</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="LSTF4F11164_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF4F11164_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">Selenium<span id="LSTF4F11164_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF4F11164_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>DefaultSelenium</span><br />    <a href="T_Selenium_WebDriverBackedSelenium.htm">Selenium<span id="LSTF4F11164_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF4F11164_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>WebDriverBackedSelenium</a><br /><p> </p><strong>Namespace:</strong> <a href="N_Selenium.htm">Selenium</a><br /><strong>Assembly:</strong> ThoughtWorks.Selenium.Core (in ThoughtWorks.Selenium.Core.dll) Version: 3.0.0<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs"><div class="OH_CodeSnippetContainerTabLeft" id="ID0EDCA_tabimgleft"> </div><div id="ID0EDCA_tab1" class="OH_CodeSnippetContainerTabFirst"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="OH_CodeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDCA_tabimgright"> </div></div><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">ObsoleteAttribute</span>("The DeafultSelenium class and Selenium RC is deprecated. Please use WebDriver instead.")]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">DefaultSelenium</span> : <span class="identifier">ISelenium</span></pre></div><div id="ID0EDCA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">ObsoleteAttribute</span>("The DeafultSelenium class and Selenium RC is deprecated. Please use WebDriver instead.")&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">DefaultSelenium</span>
	<span class="keyword">Implements</span> <span class="identifier">ISelenium</span></pre></div><div id="ID0EDCA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[<span class="identifier">ObsoleteAttribute</span>(L"The DeafultSelenium class and Selenium RC is deprecated. Please use WebDriver instead.")]
<span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">DefaultSelenium</span> : <span class="identifier">ISelenium</span></pre></div><div id="ID0EDCA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre xml:space="preserve">[&lt;<span class="identifier">ObsoleteAttribute</span>("The DeafultSelenium class and Selenium RC is deprecated. Please use WebDriver instead.")&gt;]
<span class="keyword">type</span> <span class="identifier">DefaultSelenium</span> =  
    <span class="keyword">class</span>
        <span class="keyword">interface</span> <span class="identifier">ISelenium</span>
    <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script><p>The <span class="selflink">DefaultSelenium</span> type exposes the following members.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Constructors</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium__ctor.htm">DefaultSelenium(ICommandProcessor)</a></td><td><div class="summary">
            Uses an arbitrary CommandProcessor
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium__ctor_1.htm">DefaultSelenium(String, Int32, String, String)</a></td><td><div class="summary">
            Uses a CommandBridgeClient, specifying a server host/port, a command to launch the browser, and a starting URL for the browser.
            
            <p><i>browserString</i> may be any one of the following:</p><ul><li><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADCAAE0WE0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADCAAE0WE0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADCAAE0WE0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">*firefox [absolute path]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADCAAE0WE0DDA");</script> - Automatically launch a new Firefox process using a custom Firefox profile.
            This profile will be automatically configured to use the Selenium Server as a proxy and to have all annoying prompts
            ("save your password?" "forms are insecure" "make Firefox your default browser?" disabled.  You may optionally specify
            an absolute path to your firefox executable, or just say "*firefox".  If no absolute path is specified, we'll look for
            firefox.exe in a default location (normally c:\program files\mozilla firefox\firefox.exe), which you can override by
            setting the Java system property <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABCAAE0WE0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABCAAE0WE0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABCAAE0WE0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">firefoxDefaultPath</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABCAAE0WE0DDA");</script> to the correct path to Firefox.</li><li><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADBAAE0WE0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADBAAE0WE0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADBAAE0WE0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">*iexplore [absolute path]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADBAAE0WE0DDA");</script> - Automatically launch a new Internet Explorer process using custom Windows registry settings.
            This process will be automatically configured to use the Selenium Server as a proxy and to have all annoying prompts
            ("save your password?" "forms are insecure" "make Firefox your default browser?" disabled.  You may optionally specify
            an absolute path to your iexplore executable, or just say "*iexplore".  If no absolute path is specified, we'll look for
            iexplore.exe in a default location (normally c:\program files\internet explorer\iexplore.exe), which you can override by
            setting the Java system property <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABBAAE0WE0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABBAAE0WE0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABBAAE0WE0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">iexploreDefaultPath</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABBAAE0WE0DDA");</script> to the correct path to Internet Explorer.</li><li><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADAAAE0WE0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAAAE0WE0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAAAE0WE0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">/path/to/my/browser [other arguments]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAAAE0WE0DDA");</script> - You may also simply specify the absolute path to your browser
            executable, or use a relative path to your executable (which we'll try to find on your path).  <b>Warning:</b> If you
            specify your own custom browser, it's up to you to configure it correctly.  At a minimum, you'll need to configure your
            browser to use the Selenium Server as a proxy, and disable all browser-specific prompting.</li></ul></div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Properties</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Selenium_DefaultSelenium_Processor.htm">Processor</a></td><td><div class="summary">
            The command processor that handles all of our Selenium commands
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Methods</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AddLocationStrategy.htm">AddLocationStrategy</a></td><td><div class="summary">Defines a new function for Selenium to locate elements on the page.
            For example,
            if you define the strategy "foo", and someone runs click("foo=blah"), we'll
            run your function, passing you the string "blah", and click on the element 
            that your function
            returns, or throw an "Element not found" error if your function returns null.
            
            We'll pass three arguments to your function:
            <ul><li>locator: the string the user passed in</li><li>inWindow: the currently selected window</li><li>inDocument: the currently selected document</li></ul>
            The function must return null if the element can't be found.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AddScript.htm">AddScript</a></td><td><div class="summary">Loads script content into a new script tag in the Selenium document. This
            differs from the runScript command in that runScript adds the script tag
            to the document of the AUT, not the Selenium document. The following
            entities in the script content are replaced by the characters they
            represent:
            
                &lt;
                &gt;
                &amp;
            
            The corresponding remove command is removeScript.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AddSelection.htm">AddSelection</a></td><td><div class="summary">Add a selection to the set of selected options in a multi-select element using an option locator.
            
            @see #doSelect for details of option locators
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AllowNativeXpath.htm">AllowNativeXpath</a></td><td><div class="summary">Specifies whether Selenium should use the native in-browser implementation
            of XPath (if any native version is available); if you pass "false" to
            this function, we will always use our pure-JavaScript xpath library.
            Using the pure-JS xpath library can improve the consistency of xpath
            element locators between different browser vendors, but the pure-JS
            version is much slower than the native implementations.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AltKeyDown.htm">AltKeyDown</a></td><td><div class="summary">Press the alt key and hold it down until doAltUp() is called or a new page is loaded.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AltKeyUp.htm">AltKeyUp</a></td><td><div class="summary">Release the alt key.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AnswerOnNextPrompt.htm">AnswerOnNextPrompt</a></td><td><div class="summary">Instructs Selenium to return the specified answer string in response to
            the next JavaScript prompt [window.prompt()].
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AssignId.htm">AssignId</a></td><td><div class="summary">Temporarily sets the "id" attribute of the specified element, so you can locate it in the future
            using its ID rather than a slow/complicated XPath.  This ID will disappear once the page is
            reloaded.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_AttachFile.htm">AttachFile</a></td><td><div class="summary">Sets a file input (upload) field to the file listed in fileLocator
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_CaptureEntirePageScreenshot.htm">CaptureEntirePageScreenshot</a></td><td><div class="summary">Saves the entire contents of the current window canvas to a PNG file.
            Contrast this with the captureScreenshot command, which captures the
            contents of the OS viewport (i.e. whatever is currently being displayed
            on the monitor), and is implemented in the RC only. Currently this only
            works in Firefox when running in chrome mode, and in IE non-HTA using
            the EXPERIMENTAL "Snapsie" utility. The Firefox implementation is mostly
            borrowed from the Screengrab! Firefox extension. Please see
            http://www.screengrab.org and http://snapsie.sourceforge.net/ for
            details.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_CaptureEntirePageScreenshotToString.htm">CaptureEntirePageScreenshotToString</a></td><td><div class="summary">Downloads a screenshot of the browser current window canvas to a 
            based 64 encoded PNG file. The <em>entire</em> windows canvas is captured,
            including parts rendered outside of the current view port.
            
            Currently this only works in Mozilla and when running in chrome mode.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_CaptureNetworkTraffic.htm">CaptureNetworkTraffic</a></td><td><div class="summary">
            Captures the Network Traffic that is passing through Selenium Server
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_CaptureScreenshot.htm">CaptureScreenshot</a></td><td><div class="summary">Captures a PNG screenshot to the specified file.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_CaptureScreenshotToString.htm">CaptureScreenshotToString</a></td><td><div class="summary">Capture a PNG screenshot.  It then returns the file as a base 64 encoded string.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Check.htm">Check</a></td><td><div class="summary">Check a toggle-button (checkbox/radio)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ChooseCancelOnNextConfirmation.htm">ChooseCancelOnNextConfirmation</a></td><td><div class="summary"><p>
            By default, Selenium's overridden window.confirm() function will
            return true, as if the user had manually clicked OK; after running
            this command, the next call to confirm() will return false, as if
            the user had clicked Cancel.  Selenium will then resume using the
            default behavior for future confirmations, automatically returning 
            true (OK) unless/until you explicitly call this command for each
            confirmation.
            </p><p>
            Take note - every time a confirmation comes up, you must
            consume it with a corresponding getConfirmation, or else
            the next selenium operation will fail.
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ChooseOkOnNextConfirmation.htm">ChooseOkOnNextConfirmation</a></td><td><div class="summary"><p>
            Undo the effect of calling chooseCancelOnNextConfirmation.  Note
            that Selenium's overridden window.confirm() function will normally automatically
            return true, as if the user had manually clicked OK, so you shouldn't
            need to use this command unless for some reason you need to change
            your mind prior to the next confirmation.  After any confirmation, Selenium will resume using the
            default behavior for future confirmations, automatically returning 
            true (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each
            confirmation.
            </p><p>
            Take note - every time a confirmation comes up, you must
            consume it with a corresponding getConfirmation, or else
            the next selenium operation will fail.
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Click.htm">Click</a></td><td><div class="summary">Clicks on a link, button, checkbox or radio button. If the click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ClickAt.htm">ClickAt</a></td><td><div class="summary">Clicks on a link, button, checkbox or radio button. If the click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Close.htm">Close</a></td><td><div class="summary">Simulates the user clicking the "close" button in the titlebar of a popup
            window or tab.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ContextMenu.htm">ContextMenu</a></td><td><div class="summary">Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ContextMenuAt.htm">ContextMenuAt</a></td><td><div class="summary">Simulates opening the context menu for the specified element (as might happen if the user "right-clicked" on the element).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ControlKeyDown.htm">ControlKeyDown</a></td><td><div class="summary">Press the control key and hold it down until doControlUp() is called or a new page is loaded.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ControlKeyUp.htm">ControlKeyUp</a></td><td><div class="summary">Release the control key.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_CreateCookie.htm">CreateCookie</a></td><td><div class="summary">Create a new cookie whose path and domain are same with those of current page
            under test, unless you specified a path for this cookie explicitly.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DeleteAllVisibleCookies.htm">DeleteAllVisibleCookies</a></td><td><div class="summary">Calls deleteCookie with recurse=true on all cookies visible to the current page.
            As noted on the documentation for deleteCookie, recurse=true can be much slower
            than simply deleting the cookies using a known domain/path.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DeleteCookie.htm">DeleteCookie</a></td><td><div class="summary">Delete a named cookie with specified path and domain.  Be careful; to delete a cookie, you
            need to delete it using the exact same path and domain that were used to create the cookie.
            If the path is wrong, or the domain is wrong, the cookie simply won't be deleted.  Also
            note that specifying a domain that isn't a subset of the current domain will usually fail.
            
            Since there's no way to discover at runtime the original path and domain of a given cookie,
            we've added an option called 'recurse' to try all sub-domains of the current domain with
            all paths that are a subset of the current path.  Beware; this option can be slow.  In
            big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain
            name and m is the number of slashes in the path.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DeselectPopUp.htm">DeselectPopUp</a></td><td><div class="summary">Selects the main window. Functionally equivalent to using
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADA0ZD0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADA0ZD0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADA0ZD0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">selectWindow()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADA0ZD0DDA");</script> and specifying no value for
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABA0ZD0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABA0ZD0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABA0ZD0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">windowID</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABA0ZD0DDA");</script>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DoubleClick.htm">DoubleClick</a></td><td><div class="summary">Double clicks on a link, button, checkbox or radio button. If the double click action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DoubleClickAt.htm">DoubleClickAt</a></td><td><div class="summary">Doubleclicks on a link, button, checkbox or radio button. If the action
            causes a new page to load (like a link usually does), call
            waitForPageToLoad.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DragAndDrop.htm">DragAndDrop</a></td><td><div class="summary">Drags an element a certain distance and then drops it
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_DragAndDropToObject.htm">DragAndDropToObject</a></td><td><div class="summary">Drags an element and drops it on another element
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Dragdrop.htm">Dragdrop</a></td><td><div class="summary">deprecated - use dragAndDrop instead
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals</a></td><td><div class="summary">Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/4k87zsw7" target="_blank">Finalize</a></td><td><div class="summary">Allows an <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> to attempt to free resources and perform other cleanup operations before the <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is reclaimed by garbage collection.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_FireEvent.htm">FireEvent</a></td><td><div class="summary">Explicitly simulate an event, to trigger the corresponding "on<em>event</em>"
            handler.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Focus.htm">Focus</a></td><td><div class="summary">Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAlert.htm">GetAlert</a></td><td><div class="summary">Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.
            
            <p>Getting an alert has the same effect as manually clicking OK. If an
            alert is generated but you do not consume it with getAlert, the next Selenium action
            will fail.</p><p>Under Selenium, JavaScript alerts will NOT pop up a visible alert
            dialog.</p><p>Selenium does NOT support JavaScript alerts that are generated in a
            page's onload() event handler. In this case a visible dialog WILL be
            generated and Selenium will hang until someone manually clicks OK.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAllButtons.htm">GetAllButtons</a></td><td><div class="summary">Returns the IDs of all buttons on the page.
            
            <p>If a given button has no ID, it will appear as "" in this array.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAllFields.htm">GetAllFields</a></td><td><div class="summary">Returns the IDs of all input fields on the page.
            
            <p>If a given field has no ID, it will appear as "" in this array.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAllLinks.htm">GetAllLinks</a></td><td><div class="summary">Returns the IDs of all links on the page.
            
            <p>If a given link has no ID, it will appear as "" in this array.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAllWindowIds.htm">GetAllWindowIds</a></td><td><div class="summary">Returns the IDs of all windows that the browser knows about in an array.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAllWindowNames.htm">GetAllWindowNames</a></td><td><div class="summary">Returns the names of all windows that the browser knows about in an array.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAllWindowTitles.htm">GetAllWindowTitles</a></td><td><div class="summary">Returns the titles of all windows that the browser knows about in an array.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAttribute.htm">GetAttribute</a></td><td><div class="summary">Gets the value of an element attribute. The value of the attribute may
            differ across browsers (this is the case for the "style" attribute, for
            example).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetAttributeFromAllWindows.htm">GetAttributeFromAllWindows</a></td><td><div class="summary">Returns an array of JavaScript property values from all known windows having one.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetBodyText.htm">GetBodyText</a></td><td><div class="summary">Gets the entire text of the page.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetConfirmation.htm">GetConfirmation</a></td><td><div class="summary">Retrieves the message of a JavaScript confirmation dialog generated during
            the previous action.
            
            <p>
            By default, the confirm function will return true, having the same effect
            as manually clicking OK. This can be changed by prior execution of the
            chooseCancelOnNextConfirmation command. 
            </p><p>
            If an confirmation is generated but you do not consume it with getConfirmation,
            the next Selenium action will fail.
            </p><p>
            NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible
            dialog.
            </p><p>
            NOTE: Selenium does NOT support JavaScript confirmations that are
            generated in a page's onload() event handler. In this case a visible
            dialog WILL be generated and Selenium will hang until you manually click
            OK.
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetCookie.htm">GetCookie</a></td><td><div class="summary">Return all cookies of the current page under test.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetCookieByName.htm">GetCookieByName</a></td><td><div class="summary">Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetCSSCount.htm">GetCSSCount</a></td><td><div class="summary">Returns the number of nodes that match the specified css, eg. "css=table" would give
            the number of tables.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetCursorPosition.htm">GetCursorPosition</a></td><td><div class="summary">Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.
            
            <p>Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to
            return the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as <a href="http://jira.openqa.org/browse/SEL-243">SEL-243</a>.</p>
            This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetElementHeight.htm">GetElementHeight</a></td><td><div class="summary">Retrieves the height of an element
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetElementIndex.htm">GetElementIndex</a></td><td><div class="summary">Get the relative index of an element to its parent (starting from 0). The comment node and empty text node
            will be ignored.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetElementPositionLeft.htm">GetElementPositionLeft</a></td><td><div class="summary">Retrieves the horizontal position of an element
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetElementPositionTop.htm">GetElementPositionTop</a></td><td><div class="summary">Retrieves the vertical position of an element
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetElementWidth.htm">GetElementWidth</a></td><td><div class="summary">Retrieves the width of an element
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetEval.htm">GetEval</a></td><td><div class="summary">Gets the result of evaluating the specified JavaScript snippet.  The snippet may
            have multiple lines, but only the result of the last line will be returned.
            
            <p>Note that, by default, the snippet will run in the context of the "selenium"
            object itself, so <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAEBA04C0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEBA04C0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEBA04C0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">this</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEBA04C0DDA");</script> will refer to the Selenium object.  Use <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACBA04C0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACBA04C0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACBA04C0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">window</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACBA04C0DDA");</script> to
            refer to the window of your application, e.g. <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAABA04C0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABA04C0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABA04C0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">window.document.getElementById(<span class="highlight-literal">'foo'</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABA04C0DDA");</script></p><p>If you need to use
            a locator to refer to a single element in your application page, you can
            use <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABAA04C0DDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAA04C0DDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAA04C0DDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">this</span>.browserbot.findElement(<span class="highlight-literal">"id=foo"</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAA04C0DDA");</script> where "id=foo" is your locator.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetExpression.htm">GetExpression</a></td><td><div class="summary">Returns the specified expression.
            
            <p>This is useful because of JavaScript preprocessing.
            It is used to generate commands like assertExpression and waitForExpression.</p></div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode</a></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetHtmlSource.htm">GetHtmlSource</a></td><td><div class="summary">Returns the entire HTML source between the opening and
            closing "html" tags.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetLocation.htm">GetLocation</a></td><td><div class="summary">Gets the absolute URL of the current page.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetMouseSpeed.htm">GetMouseSpeed</a></td><td><div class="summary">Returns the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetPrompt.htm">GetPrompt</a></td><td><div class="summary">Retrieves the message of a JavaScript question prompt dialog generated during
            the previous action.
            
            <p>Successful handling of the prompt requires prior execution of the
            answerOnNextPrompt command. If a prompt is generated but you
            do not get/verify it, the next Selenium action will fail.</p><p>NOTE: under Selenium, JavaScript prompts will NOT pop up a visible
            dialog.</p><p>NOTE: Selenium does NOT support JavaScript prompts that are generated in a
            page's onload() event handler. In this case a visible dialog WILL be
            generated and Selenium will hang until someone manually clicks OK.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedId.htm">GetSelectedId</a></td><td><div class="summary">Gets option element ID for selected option in the specified select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedIds.htm">GetSelectedIds</a></td><td><div class="summary">Gets all option element IDs for selected options in the specified select or multi-select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedIndex.htm">GetSelectedIndex</a></td><td><div class="summary">Gets option index (option number, starting at 0) for selected option in the specified select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedIndexes.htm">GetSelectedIndexes</a></td><td><div class="summary">Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedLabel.htm">GetSelectedLabel</a></td><td><div class="summary">Gets option label (visible text) for selected option in the specified select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedLabels.htm">GetSelectedLabels</a></td><td><div class="summary">Gets all option labels (visible text) for selected options in the specified select or multi-select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedValue.htm">GetSelectedValue</a></td><td><div class="summary">Gets option value (value attribute) for selected option in the specified select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectedValues.htm">GetSelectedValues</a></td><td><div class="summary">Gets all option values (value attributes) for selected options in the specified select or multi-select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSelectOptions.htm">GetSelectOptions</a></td><td><div class="summary">Gets all option labels in the specified select drop-down.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetSpeed.htm">GetSpeed</a></td><td><div class="summary">Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,
            the delay is 0 milliseconds.
            
            See also setSpeed.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetTable.htm">GetTable</a></td><td><div class="summary">Gets the text from a cell of a table. The cellAddress syntax
            tableLocator.row.column, where row and column start at 0.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetText.htm">GetText</a></td><td><div class="summary">Gets the text of an element. This works for any element that contains
            text. This command uses either the textContent (Mozilla-like browsers) or
            the innerText (IE-like browsers) of the element, which is the rendered
            text shown to the user.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetTitle.htm">GetTitle</a></td><td><div class="summary">Gets the title of the current page.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetValue.htm">GetValue</a></td><td><div class="summary">Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).
            For checkbox/radio elements, the value will be "on" or "off" depending on
            whether the element is checked or not.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetWhetherThisFrameMatchFrameExpression.htm">GetWhetherThisFrameMatchFrameExpression</a></td><td><div class="summary">Determine whether current/locator identify the frame containing this running code.
            
            <p>This is useful in proxy injection mode, where this code runs in every
            browser frame and window, and sometimes the selenium server needs to identify
            the "current" frame.  In this case, when the test calls selectFrame, this
            routine is called for each frame to figure out which one has been selected.
            The selected frame will return true, while all others will return false.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetWhetherThisWindowMatchWindowExpression.htm">GetWhetherThisWindowMatchWindowExpression</a></td><td><div class="summary">Determine whether currentWindowString plus target identify the window containing this running code.
            
            <p>This is useful in proxy injection mode, where this code runs in every
            browser frame and window, and sometimes the selenium server needs to identify
            the "current" window.  In this case, when the test calls selectWindow, this
            routine is called for each window to figure out which one has been selected.
            The selected window will return true, while all others will return false.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GetXpathCount.htm">GetXpathCount</a></td><td><div class="summary">Returns the number of nodes that match the specified xpath, eg. "//table" would give
            the number of tables.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_GoBack.htm">GoBack</a></td><td><div class="summary">Simulates the user clicking the "back" button on their browser.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Highlight.htm">Highlight</a></td><td><div class="summary">Briefly changes the backgroundColor of the specified element yellow.  Useful for debugging.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IgnoreAttributesWithoutValue.htm">IgnoreAttributesWithoutValue</a></td><td><div class="summary">Specifies whether Selenium will ignore xpath attributes that have no
            value, i.e. are the empty string, when using the non-native xpath
            evaluation engine. You'd want to do this for performance reasons in IE.
            However, this could break certain xpaths, for example an xpath that looks
            for an attribute whose value is NOT the empty string.
            
            The hope is that such xpaths are relatively rare, but the user should
            have the option of using them. Note that this only influences xpath
            evaluation when using the ajaxslt engine (i.e. not "javascript-xpath").
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsAlertPresent.htm">IsAlertPresent</a></td><td><div class="summary">Has an alert occurred?
            
            <p>
            This function never throws an exception
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsChecked.htm">IsChecked</a></td><td><div class="summary">Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsConfirmationPresent.htm">IsConfirmationPresent</a></td><td><div class="summary">Has confirm() been called?
            
            <p>
            This function never throws an exception
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsCookiePresent.htm">IsCookiePresent</a></td><td><div class="summary">Returns true if a cookie with the specified name is present, or false otherwise.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsEditable.htm">IsEditable</a></td><td><div class="summary">Determines whether the specified input element is editable, ie hasn't been disabled.
            This method will fail if the specified element isn't an input element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsElementPresent.htm">IsElementPresent</a></td><td><div class="summary">Verifies that the specified element is somewhere on the page.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsOrdered.htm">IsOrdered</a></td><td><div class="summary">Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will
            not be considered ordered.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsPromptPresent.htm">IsPromptPresent</a></td><td><div class="summary">Has a prompt occurred?
            
            <p>
            This function never throws an exception
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsSomethingSelected.htm">IsSomethingSelected</a></td><td><div class="summary">Determines whether some option in a drop-down menu is selected.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsTextPresent.htm">IsTextPresent</a></td><td><div class="summary">Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_IsVisible.htm">IsVisible</a></td><td><div class="summary">Determines if the specified element is visible. An
            element can be rendered invisible by setting the CSS "visibility"
            property to "hidden", or the "display" property to "none", either for the
            element itself or one if its ancestors.  This method will fail if
            the element is not present.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_KeyDown.htm">KeyDown</a></td><td><div class="summary">Simulates a user pressing a key (without releasing it yet).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_KeyDownNative.htm">KeyDownNative</a></td><td><div class="summary">Simulates a user pressing a key (without releasing it yet) by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_KeyPress.htm">KeyPress</a></td><td><div class="summary">Simulates a user pressing and releasing a key.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_KeyPressNative.htm">KeyPressNative</a></td><td><div class="summary">Simulates a user pressing and releasing a key by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_KeyUp.htm">KeyUp</a></td><td><div class="summary">Simulates a user releasing a key.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_KeyUpNative.htm">KeyUpNative</a></td><td><div class="summary">Simulates a user releasing a key by sending a native operating system keystroke.
            This function uses the java.awt.Robot class to send a keystroke; this more accurately simulates typing
            a key on the keyboard.  It does not honor settings from the shiftKeyDown, controlKeyDown, altKeyDown and
            metaKeyDown commands, and does not target any particular HTML element.  To send a keystroke to a particular
            element, focus on the element first before running this command.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/57ctke0a" target="_blank">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MetaKeyDown.htm">MetaKeyDown</a></td><td><div class="summary">Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MetaKeyUp.htm">MetaKeyUp</a></td><td><div class="summary">Release the meta key.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseDown.htm">MouseDown</a></td><td><div class="summary">Simulates a user pressing the left mouse button (without releasing it yet) on
            the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseDownAt.htm">MouseDownAt</a></td><td><div class="summary">Simulates a user pressing the left mouse button (without releasing it yet) at
            the specified location.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseDownRight.htm">MouseDownRight</a></td><td><div class="summary">Simulates a user pressing the right mouse button (without releasing it yet) on
            the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseDownRightAt.htm">MouseDownRightAt</a></td><td><div class="summary">Simulates a user pressing the right mouse button (without releasing it yet) at
            the specified location.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseMove.htm">MouseMove</a></td><td><div class="summary">Simulates a user pressing the mouse button (without releasing it yet) on
            the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseMoveAt.htm">MouseMoveAt</a></td><td><div class="summary">Simulates a user pressing the mouse button (without releasing it yet) on
            the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseOut.htm">MouseOut</a></td><td><div class="summary">Simulates a user moving the mouse pointer away from the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseOver.htm">MouseOver</a></td><td><div class="summary">Simulates a user hovering a mouse over the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseUp.htm">MouseUp</a></td><td><div class="summary">Simulates the event that occurs when the user releases the mouse button (i.e., stops
            holding the button down) on the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseUpAt.htm">MouseUpAt</a></td><td><div class="summary">Simulates the event that occurs when the user releases the mouse button (i.e., stops
            holding the button down) at the specified location.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseUpRight.htm">MouseUpRight</a></td><td><div class="summary">Simulates the event that occurs when the user releases the right mouse button (i.e., stops
            holding the button down) on the specified element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_MouseUpRightAt.htm">MouseUpRightAt</a></td><td><div class="summary">Simulates the event that occurs when the user releases the right mouse button (i.e., stops
            holding the button down) at the specified location.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Open.htm">Open</a></td><td><div class="summary">Opens an URL in the test frame. This accepts both relative and absolute
            URLs.
            
            The "open" command waits for the page to load before proceeding,
            ie. the "AndWait" suffix is implicit.
            
            <em>Note</em>: The URL must be on the same domain as the runner HTML
            due to security restrictions in the browser (Same Origin Policy). If you
            need to open an URL on another domain, use the Selenium Server to start a
            new browser session on that domain.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_OpenWindow.htm">OpenWindow</a></td><td><div class="summary">Opens a popup window (if a window with that ID isn't already open).
            After opening the window, you'll need to select it using the selectWindow
            command.
            
            <p>This command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
            In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
            an empty (blank) url, like this: openWindow("", "myFunnyWindow").</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Refresh.htm">Refresh</a></td><td><div class="summary">Simulates the user clicking the "Refresh" button on their browser.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_RemoveAllSelections.htm">RemoveAllSelections</a></td><td><div class="summary">Unselects all of the selected options in a multi-select element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_RemoveScript.htm">RemoveScript</a></td><td><div class="summary">Removes a script tag from the Selenium document identified by the given
            id. Does nothing if the referenced tag doesn't exist.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_RemoveSelection.htm">RemoveSelection</a></td><td><div class="summary">Remove a selection from the set of selected options in a multi-select element using an option locator.
            
            @see #doSelect for details of option locators
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_RetrieveLastRemoteControlLogs.htm">RetrieveLastRemoteControlLogs</a></td><td><div class="summary">Retrieve the last messages logged on a specific remote control. Useful for error reports, especially
            when running multiple remote controls in a distributed environment. The maximum number of log messages
            that can be retrieve is configured on remote control startup.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Rollup.htm">Rollup</a></td><td><div class="summary">Executes a command rollup, which is a series of commands with a unique
            name, and optionally arguments that control the generation of the set of
            commands. If any one of the rolled-up commands fails, the rollup is
            considered to have failed. Rollups may also contain nested rollups.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_RunScript.htm">RunScript</a></td><td><div class="summary">Creates a new "script" tag in the body of the current test window, and 
            adds the specified text into the body of the command.  Scripts run in
            this way can often be debugged more easily than scripts executed using
            Selenium's "getEval" command.  Beware that JS exceptions thrown in these script
            tags aren't managed by Selenium, so you should probably wrap your script
            in try/catch blocks if there is any chance that the script will throw
            an exception.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Select.htm">Select</a></td><td><div class="summary">Select an option from a drop-down using an option locator.
            
            <p>
            Option locators provide different ways of specifying options of an HTML
            Select element (e.g. for selecting a specific option, or for asserting
            that the selected option satisfies a specification). There are several
            forms of Select Option Locator.
            </p><ul><li><strong>label</strong>=<em>labelPattern</em>:
            matches options based on their labels, i.e. the visible text. (This
            is the default.)
            <ul class="first last simple"><li>label=regexp:^[Oo]ther</li></ul></li><li><strong>value</strong>=<em>valuePattern</em>:
            matches options based on their values.
            <ul class="first last simple"><li>value=other</li></ul></li><li><strong>id</strong>=<em>id</em>:
            
            matches options based on their ids.
            <ul class="first last simple"><li>id=option1</li></ul></li><li><strong>index</strong>=<em>index</em>:
            matches an option based on its index (offset from zero).
            <ul class="first last simple"><li>index=2</li></ul></li></ul><p>
            If no option locator prefix is provided, the default behaviour is to match on <strong>label</strong>.
            </p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SelectFrame.htm">SelectFrame</a></td><td><div class="summary">Selects a frame within the current window.  (You may invoke this command
            multiple times to select nested frames.)  To select the parent frame, use
            "relative=parent" as a locator; to select the top frame, use "relative=top".
            You can also select a frame by its 0-based index number; select the first frame with
            "index=0", or the third frame with "index=2".
            
            <p>You may also use a DOM expression to identify the frame you want directly,
            like this: <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAZDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAZDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAZDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">dom=frames[<span class="highlight-literal">"main"</span>].frames[<span class="highlight-literal">"subframe"</span>]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAZDDA");</script></p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SelectPopUp.htm">SelectPopUp</a></td><td><div class="summary">Simplifies the process of selecting a popup window (and does not offer
            functionality beyond what <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">selectWindow()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAYDDA");</script> already provides).
            <ul><li>If <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAFBAAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFBAAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFBAAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">windowID</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFBAAYDDA");</script> is either not specified, or specified as
            "null", the first non-top window is selected. The top window is the one
            that would be selected by <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADBAAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADBAAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADBAAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">selectWindow()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADBAAYDDA");</script> without providing a
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABBAAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABBAAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABBAAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">windowID</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABBAAYDDA");</script> . This should not be used when more than one popup
            window is in play.</li><li>Otherwise, the window will be looked up considering
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAFAAAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFAAAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFAAAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">windowID</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFAAAYDDA");</script> as the following in order: 1) the "name" of the
            window, as specified to <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EADAAAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAAAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAAAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">window.open()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAAAYDDA");</script>; 2) a javascript
            variable which is a reference to a window; and 3) the title of the
            window. This is the same ordered lookup performed by
            <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABAAAYDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAAAYDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAAAYDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">selectWindow</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAAYDDA");</script> .</li></ul></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SelectWindow.htm">SelectWindow</a></td><td><div class="summary">Selects a popup window using a window locator; once a popup window has been selected, all
            commands go to that window. To select the main window again, use null
            as the target.
            
            <p>
            
            Window locators provide different ways of specifying the window object:
            by title, by internal JavaScript "name," or by JavaScript variable.
            </p><ul><li><strong>title</strong>=<em>My Special Window</em>:
            Finds the window using the text that appears in the title bar.  Be careful;
            two windows can share the same title.  If that happens, this locator will
            just pick one.
            </li><li><strong>name</strong>=<em>myWindow</em>:
            Finds the window using its internal JavaScript "name" property.  This is the second 
            parameter "windowName" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag)
            (which Selenium intercepts).
            </li><li><strong>var</strong>=<em>variableName</em>:
            Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current
            application window, e.g. "window.foo = window.open(url);".  In those cases, you can open the window using
            "var=foo".
            </li></ul><p>
            If no window locator prefix is provided, we'll try to guess what you mean like this:</p><p>1.) if windowID is null, (or the string "null") then it is assumed the user is referring to the original window instantiated by the browser).</p><p>2.) if the value of the "windowID" parameter is a JavaScript variable name in the current application window, then it is assumed
            that this variable contains the return value from a call to the JavaScript window.open() method.</p><p>3.) Otherwise, selenium looks in a hash it maintains that maps string names to window "names".</p><p>4.) If <em>that</em> fails, we'll try looping over all of the known windows to try to find the appropriate "title".
            Since "title" is not necessarily unique, this may have unexpected behavior.</p><p>If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages
            which identify the names of windows created via window.open (and therefore intercepted by Selenium).  You will see messages
            like the following for each window as it is opened:</p><p><div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAABAXDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABAXDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABAXDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">debug: window.open call intercepted; window ID (which you can use with selectWindow()) <span class="highlight-keyword">is</span> <span class="highlight-literal">"myNewWindow"</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABAXDDA");</script></p><p>In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the "onLoad" event, for example).
            (This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using
            an empty (blank) url, like this: openWindow("", "myFunnyWindow").</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetBrowserLogLevel.htm">SetBrowserLogLevel</a></td><td><div class="summary">Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded.
            Valid logLevel strings are: "debug", "info", "warn", "error" or "off".
            To see the browser logs, you need to
            either show the log window in GUI mode, or enable browser-side logging in Selenium RC.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetContext.htm">SetContext</a></td><td><div class="summary">Writes a message to the status bar and adds a note to the browser-side
            log.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetCursorPosition.htm">SetCursorPosition</a></td><td><div class="summary">Moves the text cursor to the specified position in the given input element or textarea.
            This method will fail if the specified element isn't an input element or textarea.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetExtensionJs.htm">SetExtensionJs</a></td><td><div class="summary">
            Sets the extension Javascript for the session
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetMouseSpeed.htm">SetMouseSpeed</a></td><td><div class="summary">Configure the number of pixels between "mousemove" events during dragAndDrop commands (default=10).
            <p>Setting this value to 0 means that we'll send a "mousemove" event to every single pixel
            in between the start location and the end location; that can be very slow, and may
            cause some browsers to force the JavaScript to timeout.</p><p>If the mouse speed is greater than the distance between the two dragged objects, we'll
            just send one "mousemove" at the start location and then one final one at the end location.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetSpeed.htm">SetSpeed</a></td><td><div class="summary">Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,
            the delay is 0 milliseconds.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_SetTimeout.htm">SetTimeout</a></td><td><div class="summary">Specifies the amount of time that Selenium will wait for actions to complete.
            
            <p>Actions that require waiting include "open" and the "waitFor*" actions.</p>
            The default timeout is 30 seconds.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ShiftKeyDown.htm">ShiftKeyDown</a></td><td><div class="summary">Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ShiftKeyUp.htm">ShiftKeyUp</a></td><td><div class="summary">Release the shift key.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_ShutDownSeleniumServer.htm">ShutDownSeleniumServer</a></td><td><div class="summary">Kills the running Selenium Server and all browser sessions.  After you run this command, you will no longer be able to send
            commands to the server; you can't remotely start the server once it has been stopped.  Normally
            you should prefer to run the "stop" command, which terminates the current browser session, rather than 
            shutting down the entire server.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Start.htm">Start<span id="LSTF4F11164_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF4F11164_3?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Starts a new Selenium testing session
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Start_1.htm">Start(String)</a></td><td><div class="summary">
            Starts a new Selenium testing session
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Stop.htm">Stop</a></td><td><div class="summary">
            Ends the current Selenium testing session (normally killing the browser)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Submit.htm">Submit</a></td><td><div class="summary">Submit the specified form. This is particularly useful for forms without
            submit buttons, e.g. single-input "Search" forms.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString</a></td><td><div class="summary">Returns a <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> that represents the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.</div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Type.htm">Type</a></td><td><div class="summary">Sets the value of an input field, as though you typed it in.
            
            <p>Can also be used to set the value of combo boxes, check boxes, etc. In these cases,
            value should be the value of the option selected, not the visible text.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_TypeKeys.htm">TypeKeys</a></td><td><div class="summary">Simulates keystroke events on the specified element, as though you typed the value key-by-key.
            
            <p>This is a convenience method for calling keyDown, keyUp, keyPress for every character in the specified string;
            this is useful for dynamic UI widgets (like auto-completing combo boxes) that require explicit key events.</p><p>Unlike the simple "type" command, which forces the specified value into the page directly, this command
            may or may not have any visible effect, even in cases where typing keys would normally have a visible effect.
            For example, if you use "typeKeys" on a form element, you may or may not see the results of what you typed in
            the field.</p><p>In some cases, you may need to use the simple "type" command to set the value of the field and then the "typeKeys" command to
            send the keystroke events corresponding to what you just typed.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_Uncheck.htm">Uncheck</a></td><td><div class="summary">Uncheck a toggle-button (checkbox/radio)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_UseXpathLibrary.htm">UseXpathLibrary</a></td><td><div class="summary">Allows choice of one of the available libraries.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_WaitForCondition.htm">WaitForCondition</a></td><td><div class="summary">Runs the specified JavaScript snippet repeatedly until it evaluates to "true".
            The snippet may have multiple lines, but only the result of the last line
            will be considered.
            
            <p>Note that, by default, the snippet will be run in the runner's test window, not in the window
            of your application.  To get the window of your application, you can use
            the JavaScript snippet <div class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABAAFDDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAAFDDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAAFDDA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre xml:space="preserve">selenium.browserbot.getCurrentWindow()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAFDDA");</script>, and then
            run your JavaScript in there</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_WaitForFrameToLoad.htm">WaitForFrameToLoad</a></td><td><div class="summary">Waits for a new frame to load.
            
            <p>Selenium constantly keeps track of new pages and frames loading, 
            and sets a "newPageLoaded" flag when it first notices a page load.</p>
            
            See waitForPageToLoad for more information.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_WaitForPageToLoad.htm">WaitForPageToLoad</a></td><td><div class="summary">Waits for a new page to load.
            
            <p>You can use this command instead of the "AndWait" suffixes, "clickAndWait", "selectAndWait", "typeAndWait" etc.
            (which are only available in the JS API).</p><p>Selenium constantly keeps track of new pages loading, and sets a "newPageLoaded"
            flag when it first notices a page load.  Running any other Selenium command after
            turns the flag to false.  Hence, if you want to wait for a page to load, you must
            wait immediately after a Selenium command that caused a page-load.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_WaitForPopUp.htm">WaitForPopUp</a></td><td><div class="summary">Waits for a popup window to appear and load up.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_WindowFocus.htm">WindowFocus</a></td><td><div class="summary">Gives focus to the currently selected window
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Selenium_DefaultSelenium_WindowMaximize.htm">WindowMaximize</a></td><td><div class="summary">Resize currently selected window to take up the entire screen
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Fields</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><table id="memberList" class="members"><tr><th class="ps_iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protfield.gif" alt="Protected field" title="Protected field" /></td><td><a href="F_Selenium_DefaultSelenium_commandProcessor.htm">commandProcessor</a></td><td><div class="summary">
            An ICommandProcessor object used to process the commands.
            </div></td></tr></table><a href="#mainBody">Top</a><div class="OH_CollapsibleAreaRegion" id="seeAlsoSection"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"> </div><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Selenium.htm">Selenium Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p>Copyright © 2013 Software Freedom Conservancy</p><div class="OH_feedbacklink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:webdriver%40googlegroups.com?Subject=WebDriver">WebDriver Users Google Group</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>